/* Copyright (c) 2001 Vision for New York - www.vfny.org.  All rights reserved.
 * This code is released under the Apache license, availible at the root GML4j directory.
 */
package org.geotools.gml;

import java.util.*;

import org.xml.sax.*;
import org.xml.sax.helpers.*;

import com.vividsolutions.jts.geom.*;


/**
 * LEVEL2 saxGML4j GML filter: translates coordinates and GML events into OGC simple types.
 *
 * <p>This filter simply reads in the events and coordinates passed to it by its GMLFilterDocument child
 * and converts them into JTS objects.  Note that it passes through anything not specifically sent to it by
 * GMLFilterDocument (i.e. more or less everything not in geometry.xsd).  The parent of this filter must
 * implement GMLHandlerJTS in order to receive the JTS objects passed by this filter.</p>
 * 
 * @author Rob Hranac, Vision for New York
 * @version alpha, 12/01/01
 *
 */
public class GMLFilterGeometry extends XMLFilterImpl implements GMLHandlerGeometry {


		/** Handler for the JTS elements generated by this filter */
		private GMLHandlerJTS parent;  

		/** Factory for the JTS geometries. */
		private GeometryFactory geometryFactory = new GeometryFactory();

		/** Factory for the GML geomtry type subhandlers. */
		private SubHandlerFactory handlerFactory = new SubHandlerFactory();

		/** Generic GML geometry type subhandler. */
		private SubHandler currentHandler;


		/**
		 * Constructor with parent, which must implement GMLHandlerJTS.
		 *
		 * @param parent The parent of this filter.
		 */
		public GMLFilterGeometry (GMLHandlerJTS parent) {
				super(parent);
				this.parent = parent;
		}


		/**
		 * Manages the start of a new main or sub geometry.  This method looks at the status of the current handler
		 * and either returns a new sub-handler (if the last one was successfully returned already) or passes the 
		 * element start notification along to the current handler as a sub geometry notice.
		 *
		 * @param localName The local name of the geometry, which corresponds to an OGC simple feature type.
		 * @param atts The attributes of the geometry, including SRID, etc.
		 */
		public void geometryStart(String localName, Attributes atts)
				throws SAXException {

				for( int i = 0; i < atts.getLength() ; i++ ) {
						//getName(i);
				}

				if( currentHandler == null ) { currentHandler = handlerFactory.create(localName); }
				else                         { currentHandler.subGeometry(localName, currentHandler.GEOMETRY_START); }

						
		}


		/**
		 * Manages the end of a new main or sub geometry.  This method looks at the status of the current handler
		 * and either returns a the finished JTS object to its parent or passes the element end notification along
		 * to the current handler as a sub geometry notice.
		 *
		 * @param localName The local name of the geometry, which corresponds to an OGC simple feature type.
		 */
		public void geometryEnd(String localName)
				throws SAXException {

 				if( currentHandler.isComplete(localName) ) { 
						parent.geometry( currentHandler.create(geometryFactory) );
						currentHandler = null;
				}
				else { 
						currentHandler.subGeometry(localName, currentHandler.GEOMETRY_END);
				}

		}


		/**
		 * Manages a sub geometry, which simply means always pass it to the current content handler as a sub.
		 *
		 * @param localName The local name of the geometry, which corresponds to an OGC simple feature type.
		 */
		public void geometrySub(String localName)
				throws SAXException {

				currentHandler.subGeometry(localName, currentHandler.GEOMETRY_SUB);
		}


		/**
		 * Gets a coordinate from the child and passes it to the current handler as an add request.
		 *
		 * @param x The X corodinate of the recieved coordinate.
		 * @param y The Y corodinate of the recieved coordinate.
		 */
		public void gmlCoordinates( double x, double y )
				throws SAXException {

				currentHandler.addCoordinate( new Coordinate(x, y) );

		}


		/**
		 * Gets a coordinate from the child and passes it to the current handler as an add request.
		 *
		 * @param x The X corodinate of the recieved coordinate.
		 * @param y The Y corodinate of the recieved coordinate.
		 * @param z The Z corodinate of the recieved coordinate.
		 */
		public void gmlCoordinates( double x, double y, double z )
				throws SAXException {

				currentHandler.addCoordinate( new Coordinate(x, y, z) );

		}



}
