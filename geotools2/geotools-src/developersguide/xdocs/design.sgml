<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/css"
href="file:/home/cameron/work/geotools2/extbin/gtbuild/xxe/css/docbook41.css"
?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD Simplified DocBook XML V4.1.2.4//EN"
"file:/home/cameron/work/geotools2/extbin/gtbuild/xxe/dtd/sdocbook/sdocbook.dtd">
<article
id="index"
><articleinfo
><title
>Geotools2 Software Design Description</title
><author
><firstname
>Cameron</firstname
><surname
>Shorter</surname
></author
><date
>$Date: 2002/09/27 13:44:24 $</date
><abstract
><para
>Software Design Description of Geotools2.</para
></abstract
></articleinfo
><section
><title
id="scope"
>Scope.</title
><section
><title
id="identification"
>Identification.</title
><para
>This document describes the design of <ulink
url="http://geotools.org"
>Geotools2</ulink
>.</para
></section
><section
><title
id="systemoverview"
>System overview.</title
><para
>Geotools 2 is an open source, java GIS toolkit for developing standards compliant solutions. It&#39;s modular architecture allows extra functionality to be easily incorporated. Geotools 2 aims to support Open GIS and other relevant standards as they are developed.</para
><para
>GeoTools 2 code is built using the latest Java tools and environments (Java 1.4.1 at time of writing) and will continue to leverage the capabilites of future Java environments and offical extentions as and when the technologies are released and have been through the first maintenance cycle (i.e. version 1.x.1).</para
><para
>The GeoTools2 (GT2) project is divided into separate modules, each of which implements a specific requirement. Only a subset of these modules is usually required to build an application based on GT2.</para
></section
><section
><title
id="documentoverview"
>Document overview.</title
><para
>This Software Design Document is based on the <ulink
url="http://www.pogner.demon.co.uk/mil_498/sdd-did.htm"
>MIL-STD 498 Software Design Description Data Item Description (SDD DID)</ulink
>. MIL-STD 498 specifies a software development framework and the SDD DID specifies the heading structure for this document and guidence for the content in each section.</para
></section
></section
><section
><title
id="referencedocuments"
>Reference documents.</title
><para
>To Do:</para
></section
><section
><title
id="designdecisions"
>Geotools2 wide design decisions.</title
><para
>To do:</para
><itemizedlist
><listitem
><para
>Implementing Open GIS Standards.</para
></listitem
><listitem
><para
>Open Source, so not using any proprietory libraries.</para
></listitem
><listitem
><para
>Not providing an end application, but rather a factoring common libraries into on location in order to provide tools to produce many different libraries.</para
></listitem
></itemizedlist
></section
><section
><title
id="architecturaldesign"
>Geotools2 architectural design.</title
><section
><title
>Module components.</title
><para
></para
></section
><section
><title
>Concept of execution.</title
><para
></para
></section
><section
><title
>Interface design.</title
><section
><title
>Interface identification and diagrams.</title
><para
></para
></section
><section
><title
>Module XXX</title
><para
></para
></section
><section
><title
>Module YYY</title
><para
></para
></section
></section
></section
><section
><title
id="scope"
>Geotools2 detailed design.</title
><section
><title
>Module XXX.</title
><para
></para
></section
><section
><title
>Module YYY.</title
><para
></para
></section
></section
><section
><title
>Requirements traceability.</title
><para
>Since this is an open source project, without a commercial contract to be satisfied, there are no requirements to trace to. Hence, this section is not addressed.</para
></section
><section
><title
>Notes.</title
><para
></para
></section
><section
id="design"
><title
>Design</title
><section
><title
id="jamesinsert"
>JamesInsert</title
><para
>To do: cut text from this section into the rest of the document.</para
><para
>The GeoTools2 (GT2) project is divided into a number of separate module, each of which implements a specific requirement. Only a subset of these modules is usually required to build an application based on GT2.</para
><para
>At the hart of GT2 is the core module, this module contains no implementation code, just Java interfaces for all the key modules.</para
><para
>The next important module is the defaultcore which provides an implementation of the key interfaces found in the core module with the exception of datasource and rendering. The defaultcore module contains code which uses the latest version of Java (1.4) though it is envisioned that alternative implementations of core could be made in future, perhaps to target J2ME.</para
><para
>The datasource and rendering interfaces are not implemented by the defaultcore module as there will need to be multiple implementations available so implementation is left to other modules. Note that although the defaultcore module includes a full set of objects for representing the SLD and Filter specification there is no code in these modules for reading or writing such documents, instead an entirely programmatic approach is assumed with IO for such specifications being left to other modules.</para
><para
>After core and defaultcore come a series of other modules which provide targeted implementations of the remaining parts of the core api. These include:</para
><para
>sldstyling - an IO module which can read and write SLD XML documents by converting to and from the style objects implemented in defaultcore</para
><para
>filter - an IO module which can read and write Filter Encoding XML documents by converting to and from the filter objects implemented in defaultcore</para
><para
>postgis - a datasource implementation for pulling spatial and attribute data from a PostGIS database. (taking advantage of the spatial capabilities of PostGIS)</para
><para
>mysql - a datasource implementation for pulling spatial and attribute data from a MySQL database. (working around the lack of spatial capability in MySQL)</para
><para
>gmldatasource - a datasource implementation which can parse GML 2 encoded information.</para
><para
>mapinfo - a datasource implementation which can read MIF/MID files</para
><para
>shapefile - a datasource implementation which can read Shapefiles</para
><para
>java2drenderer - an implementation of the rendering interface which uses the Java2D API.</para
><para
>svgsupport - a module which extends the java2drenderer so that SVG files can be created</para
><para
>cts-coordtrans - an implementation of the Coordinate Transformation specifications</para
><para
>gcs-coverage - an implementation of the Grid Coverages specification</para
><para
>gui - a suite of visual components for navigating and displaying maps produced by a renderer (e.g. the java2drenderer)</para
><para
>algorithms - a suite of algorithms for analyzing and manipulating geographic objects</para
><para
>wmsserver - an implementation of the OGC WMS spec, including support for SLD</para
><para
>A WFS has been implemented as a separate project using the GT2 codebase and it envisioned that the wmsserver module will soon be extracted and become part of a separate project which still using the GT2 as a base.</para
><para
>Some more details of the above modules, including JavaDoc API can be found at: modules.geotools.org/core</para
><para
>That site is generated automatically, though due to current work on updating the build process the site is currently our of date.</para
></section
><section
><title
id="modulardesign"
>Modular Design</title
><para
>Geotools has a modular design. Each module is has it&#39;s own directory structure and build process. Dependancies between modules are described in each module&#39;s <filename
>project.xml</filename
> file. Low level modules, like DataSource, can be used as base classes by external Geographic Applications.</para
><para
>Each module has its own home page which provides an overview of the module, contact details for the modules developer, a list of all develoeprs and contributors, dependancy information, full javadocs, unit test reports and lists of outstanding tasks. A full list of the module homepages can be found at <ulink
url="http://modules.geotools.org"
> modules.geotools.org </ulink
>.</para
><para
>Geotools derived its directory structure from <ulink
url="http://www.netbeans.org"
>Netbeans</ulink
>.</para
><para
>There are a few key modules worth noting:</para
><itemizedlist
><listitem
><para
><filename
>core</filename
></para
><para
>The core module contains interfaces that may be used by external applications, and key event classes that the core modules depend on.</para
></listitem
><listitem
><para
><filename
>defaultcore</filename
></para
><para
>This contains default classes that implement the interfaces in <filename
>core</filename
>. The default classes generally only contain basic functionallity and are extended by other geotools classes.</para
></listitem
></itemizedlist
><para
>Within the core module the key packages are set out. Each package contains interfaces which define a major part of the functionality of GeoTools2. Given the intention to follow the OGC standards wherever possible, many of the packages relate to specific OGC specifications.</para
><itemizedlist
><listitem
><para
><filename
>data</filename
></para
><para
>Contains the interface for DataSources. Several GeoTools2 modules provide implementations of this interface. Examples include the shapefile module, the postgis module and the gmldatasource module</para
><para
>Developers familier with formats not yet supported are encurage to write a module to provide access to it.</para
></listitem
><listitem
><para
><filename
>feature</filename
></para
><para
>Provides interfaces for classes which represent OGC features. The defaultcore module provides a simple Flat implementation of the Feature interface. A full implementation is still needed which supports complex nested Feature types.</para
></listitem
></itemizedlist
></section
></section
></article
>
