<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN"
"http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd">
<section>
  <title id="architecturaldesign">Geotools2 architectural design.</title>

  <section>
    <title id="geotoolscomponents">Geotools2 components.</title>

    <section>
      <title id="modulesoverview">Geotools Packages</title>

      <figure>
        <title>Core Geotools2 packages</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/design/GeotoolsPackages.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The GeoTools2 (GT2) project is divided into a number of separate
      module, each of which implements a specific requirement. Only a subset
      of these modules is usually required to build an application based on
      GT2.</para>

      <variablelist>
        <title>Core Geotools2 packages</title>

        <varlistentry>
          <term>widget</term>

          <listitem>
            <para>A <literal>widget</literal> is a component that can be put
            onto a display. For example, a MapPane for displaying a map, a
            LegendWidget, a PanLeft button.</para>

            <para><citetitle>Widgets</citetitle> process state change events
            from the map (context) package and specify how the widget will
            behave. For example, an BBoxEvent sent to a MapPane will cause the
            MapPane to be re-rendered with the new BBox, while the same event
            to a LocatorMap will keep the basemap the same and redraw a red
            locator box on the widget.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>renderer</term>

          <listitem>
            <para>The <literal>renderer</literal> is responsible for drawing
            features on the display. It is called by map drawing
            <literal>widgets</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>styling</term>

          <listitem>
            <para>This specifies how certain features are drawn according to
            the feature&#39;s attributes. It contains information like:</para>

            <itemizedlist>
              <listitem>
                <para>Rivers are drawn as blue, 2 pixels wide.</para>
              </listitem>

              <listitem>
                <para>Waypoints are to be drawn as a red circle with radius=1
                pixcel.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>map (sometimes called context)</term>

          <listitem>
            <para><literal>Map</literal> stores a list of Layers and a
            BoundingBox associated with a map.</para>

            <para><literal>Tools</literal> change the data in
            <literal>map</literal> and <literal>map</literal> sends events to
            widgets on change.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>tools</term>

          <listitem>
            <para><literal>Tools</literal> process key and mouse events from
            widgets and cause state changes in <literal>map</literal>.</para>

            <para>A widget&#39;s characteristics can be changed by associating
            a different tool with it. For example, a MapPane can have a
            ZoomTool where mouse clicks trigger zooming, or a DataEntryTool
            where mouse clicks trigger a Feature to be built.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>cs and ct</term>

          <listitem>
            <para>Coordinate System and Coordinate Transform.</para>

            <para>These packages allow transforms between Coordinate Systems.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data</term>

          <listitem>
            <para>This package is the interface to numerous DataSources. For
            example, ESRI shapefile or Web Feature Server.</para>

            <para>It provides both read and write functionality (depending on
            the capability of the underlying DataSource).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>filter</term>

          <listitem>
            <para>Filters are applied to DataSources to create a list of
            Features for a Layer. Filters contain information like:</para>

            <para>&#34;Give me all the lines where LineType=Road and
            RoadType=Main.&#34;</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>feature</term>

          <listitem>
            <para>This contains the base Geographic Feature Types - points,
            lines, polygons, etc.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <itemizedlist>
        <title>Geotools modules</title>

        <listitem>
          <para>core: At the hart of GT2 is the core module, this module
          contains no implementation code, just Java interfaces for all the
          key modules.</para>
        </listitem>

        <listitem>
          <para>defaultcore: The next important module is the defaultcore
          which provides an implementation of the key interfaces found in the
          core module with the exception of datasource and rendering. The
          defaultcore module contains code which uses the latest version of
          Java (1.4) though it is envisioned that alternative implementations
          of core could be made in future, perhaps to target J2ME.</para>

          <para>The datasource and rendering interfaces are not implemented by
          the defaultcore module as there will need to be multiple
          implementations available so implementation is left to other
          modules. Note that although the defaultcore module includes a full
          set of objects for representing the SLD and Filter specification
          there is no code in these modules for reading or writing such
          documents, instead an entirely programmatic approach is assumed with
          IO for such specifications being left to other modules.</para>
        </listitem>

        <listitem>
          <para>Rendering: The rendering modules are responsible for rendering
          geographic data.</para>
        </listitem>

        <listitem>
          <para>Transforms: These modules manipulate geographic data.</para>
        </listitem>

        <listitem>
          <para>DataSources: These modules read native geographic data formats
          and convert it to a format usable by geotools2.</para>
        </listitem>
      </itemizedlist>

      <para>to do:</para>

      <itemizedlist>
        <listitem>
          <para>explain the reasoning behind having a core/defaultcore
          implementation.</para>
        </listitem>

        <listitem>
          <para>Expand the module sections to explain each module&#39;s
          design.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title id="conceptofexecution">Concept of execution.</title>

    <itemizedlist>
      <listitem>
        <para>Sequence Diagrams/Collaberation Diagrams showing the
        relationships between modules.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title id="interfacedesign">Interface design.</title>

    <para></para>

    <section>
      <title id="interfaceidentificationanddiagrams">Interface identification
      and diagrams.</title>

      <para></para>
    </section>

    <section>
      <title>Module XXX</title>

      <para></para>
    </section>

    <section>
      <title>Module YYY</title>

      <para></para>
    </section>
  </section>
</section>