<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN"
"http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd">
<section id="development">
  <title>Development</title>

  <section id="dependancies">
    <title>Dependancies</title>

    <para>Before developing GeoTools2, you should download and install the
    following:</para>

    <itemizedlist>
      <listitem>
        <para>Java Software Development Kit version 1.4 or later</para>
      </listitem>

      <listitem>
        <para>maven beta 10 or later.</para>
      </listitem>

      <listitem>
        <para>Java Advance Imaging Libraries (JAI) are used by GeoTools when
        rendering. The libraries should be installed into your JRE libraries.
        See the <ulink url="http://java.sun.com/products/java-media/jai/">Java
        Advanced Imaging Libraries pages</ulink> for details.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="requirementstracing">
    <title>Requirements Tracing</title>

    <para>Requirements Tracing involves mapping high level requirements
    (usually in a specification or contract) down to lower level requirements
    (usually in a design document). It is particularly useful in commercial
    projects to prove completion of a project or compliance to a standard.</para>

    <para>This project currently doesn&#39;t use Requirements Tracing, and to
    date I&#39;m yet to see a good open source requirements tracing tool.</para>
  </section>

  <section>
    <title>Language</title>

    <para>This section describes the language(s) and compilers used by this
    project.</para>

    <section id="java">
      <title>Java</title>

      <para>This project is written in Java requires version 1.4 or greater.
      To ensure the classes compile without errors, you need to specify that
      you are using 1.4 or greater using the following options:</para>

      <blockquote>
        <para><command>javac -source 1.4 [other options] [files to compile]</command></para>
      </blockquote>

      <para>Make sure you update <link linkend="netbeanscompileoptions">compile
      options in Netbeans</link> if you use Netbeans.</para>

      <para>If you use <filename>ant</filename> for compiling, or building
      javadocs or similar, then you will need to include something like:</para>

      <para><command>&#60;javadoc source=&#34;1.4&#34;&#62;...</command></para>

      <section>
        <title>Java from Sun</title>

        <para>So far, I have only tested this project with <ulink
        url="http://java.sun.com">Sun&#39;s Software Development Kit (SDK)</ulink>.
        If you try another java compiler then let me know how successful you
        are and we can include it here.</para>
      </section>
    </section>
  </section>

  <section id="configurationmanagement">
    <title>Configuration Management</title>

    <section id="cvs">
      <title>Code Versioning (using CVS with ssh)</title>

      <para>To edit GeoTools files you will need to set up CVS and ssh on your
      computer so that you can access the files stored on <ulink
      url="http://sourceforge.net">http://sourceforge.net</ulink>. How to
      setup ssh and cvs for use with Sourceforge is explained in the documents
      at: <ulink url="https://sourceforge.net/docman/?group_id=1">https://sourceforge.net/docman/?group_id=1</ulink>
      (search for <emphasis>ssh</emphasis> and <emphasis>cvs</emphasis>). An
      excellent CVS manual can be found at <ulink
      url="http://cvsbook.red-bean.com/">http://cvsbook.red-bean.com/</ulink>.</para>

      <para>Information about the geotools repository can be found at: <ulink
      url="http://sourceforge.net/cvs/?group_id=4091">http://sourceforge.net/cvs/?group_id=4091</ulink>.</para>
    </section>

    <section id="moduleversionnumbers">
      <title>Module version numbers</title>

      <para>Each GeoTools2 module contains it&#39;s own version number.
      Version numbers are based on 3 digits, <emphasis>&#60;major&#62;.&#60;minor&#62;.&#60;patch&#62;</emphasis>.
      It looks like <emphasis>2.3.4 </emphasis>.</para>

      <variablelist>
        <varlistentry>
          <term>major version</term>

          <listitem>
            <para>Major version number should be incremented to indicate that
            a module has lost full compatibility to earlier versions. So you
            can safely upgrade to later versions of a module so long as the
            major version has not changed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>minor version</term>

          <listitem>
            <para>The second digit (minor) is incremented whenever new
            features are added. Modules are forward compatible across minor
            versions, but usually not backward compatible.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>patch version</term>

          <listitem>
            <para>The last digit is for patches (bug fixes). It is used to
            indicate fixes in bugs only. No new features were made and full
            compatibility is preserved.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The module version number is set in the <literal>&#60;currentVersion&#62;</literal>
      tag in <filename>geotools2/geotools-src/&#60;module&#62;/project.xml</filename>.
      Maven uses this value during the build process. [to do: verify this is
      correct]</para>

      <para>to do: Do we need to mention adding &#34;beta&#34; to a version
      tag?</para>
    </section>

    <section id="taggingreleases">
      <title>Tagging releases</title>

      <para>Every time you increment the module version number, you need to
      tag the relevant files in the repository. This usually involves tagging
      all files in the module.</para>

      <para>Tag names are based on the module version and look like
      <emphasis>r&#60;major&#62;_&#60;minor&#62;_&#60;patch&#62;.</emphasis>
      Eg: r2_3_4 .</para>

      <para>Note that full stops from the version number are replaced with
      underscores. This is because CVS doesn&#39;t allow full stops in tags.</para>

      <para>The <emphasis>r</emphasis> in front of the tag stands for
      <emphasis>release</emphasis> to distinguish itself from branch tags.</para>

      <para>Typically, you would create a release tag with the following
      statements in CVS:</para>

      <example>
        <title>CVS tagging a module</title>

        <programlisting>cd geotools2/geotools-src/&#60;module&#62;
cvs tag -R r2_3_4</programlisting>
      </example>
    </section>
  </section>

  <section id="communication">
    <title>Communication</title>

    <section id="irc">
      <title>Internet Chat Relay</title>

      <para>GeoTools developers meet regularly to discuss issues such as
      design. Meeting times are announced on the geotools-dvlp email list. At
      the time of writing, developers meet weekly at <emphasis>19:30 Monday
      UTC</emphasis>. Check <ulink
      url="http://www.timeanddate.com/worldclock/">http://www.timeanddate.com/worldclock/</ulink>
      to find what this time translates to in your part of the world.</para>

      <para>If you are new to IRC, you will need to find an IRC client. The
      later versions of Netscape and Mozilla have IRC built in, and you can
      connect to a GeoTools meeting simply by using the URL: <ulink
      url="irc://irc.eu.freenode.net#getools">irc://irc.eu.freenode.net#geotools</ulink>.</para>

      <para>The information you need to configure your IRC client are:</para>

      <variablelist>
        <varlistentry>
          <term>Server</term>

          <listitem>
            <para>Pick one from <ulink
            url="http://freenode.net/irc_servers.shtml">http://freenode.net/irc_servers.shtml</ulink>,
            eg: irc.eu.freenode.net.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Channel</term>

          <listitem>
            <para>#geotools</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Port</term>

          <listitem>
            <para>6667</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Logs from IRC meetings are stored on the <ulink
      url="http://geotools.org">http://geotools.org</ulink> site.</para>

      <para>Members of the Project Management Committee who are regular IRC
      participants should let others know if they are not coming so that the
      meeting is not delayed on their behalf.</para>
    </section>

    <section id="email">
      <title>Email lists</title>

      <para>Much of the development discussion happens on the geotools-devel
      email list. Refer to <ulink
      url="http://sourceforge.net/mail/?group_id=4091">http://sourceforge.net/mail/?group_id=4091</ulink>
      for a list of GeoTools lists.</para>
    </section>
  </section>

  <section id="roles">
    <title>Roles and Responsibilities</title>

    <para>The roles and responsibilities that people can assume in this
    project are based on merit. Everybody can help no matter what their role.
    Those who have been long term or valuable contributors to the project
    obtain the right to vote and commit directly to the source repository.</para>

    <section id="userrole">
      <title>Users</title>

      <para>Users are the people who use the products of the Project. People
      in this role aren&#39;t contributing code, but they are using the
      products, reporting bugs, making feature requests, and such. This is by
      far the most important category of people as, without users, there is no
      reason for the Project.</para>

      <para>When a user starts to contribute code or documentation patches,
      they become a Contributor.</para>
    </section>

    <section id="contributorrole">
      <title>Contributors</title>

      <para>Contributors are the people who write code or documentation
      patches or contribute positively to the project in other ways. A
      volunteer&#39;s contribution is always recognized. In source code, all
      volunteers who contribute to a source file may add their name to the
      list of authors for that file.</para>
    </section>

    <section id="committerrole">
      <title>Committers</title>

      <para>Contributors who give frequent and valuable contributions to a
      subproject of the Project can have their status promoted to that of a
      &#34;Committer&#34; for that subproject. A Committer has write access to
      the source code repository and gains voting rights allowing them to
      affect the future of the subproject.</para>

      <para>In order for a Contributor to become a Committer, another
      Committer can nominate that Contributor or the Contributor can ask for
      it.</para>

      <para>Once a Contributor is nominated, all existing committers will
      vote. If there are at least 3 positive votes and no negative votes, the
      Contributor is converted into a Committer and given write access to the
      source code repository. This is an example offer letter that should be
      sent to the volunteer after 3 positive votes have been received:</para>

      <blockquote>
        <para>Dear Contributor,</para>

        <para>Our project would like to offer you commit privileges. We have
        been impressed with your contributions up till now, and believe that
        your involvement will improve the quality of the code we produce. If
        you are interested in having commit privileges, please set up an
        account with <ulink url="http://sourceforge.net/">
        http://sourceforge.net</ulink> and let us know your account name.</para>

        <para>We all hope that you accept this invitation.</para>

        <para>The GeoTools Project Management Committee.</para>
      </blockquote>

      <para>Committers are asked to coordinate their efforts with the
      maintainers of the modules they wish to modify/extend. Contact details
      for each module&#39;s maintainer can be found at
      http://modules.geotools.org/&#60;module&#62;/team-list.html e.g. <ulink
      url="http://modules.geotools.org/shapefile/team-list.html">
      http://modules.geotools.org/shapefile/team-list.html</ulink></para>

      <para>At times, Committers may go inactive for a variety of reasons. A
      Committer that has been inactive for 6 months or more may lose their
      status as a Committer. Getting access back is as simple as re-requesting
      it on the project&#39;s Developer mailing list.</para>
    </section>

    <section id="pmcrole">
      <title>Project Management Committee (PMC)</title>

      <para>Committers who frequently participate with valuable contributions
      may have their status promoted to that of a <emphasis>Project Management
      Committee Member</emphasis>. This committee is the official managing
      body of the Project and is responsible for setting overall project
      direction. In order to become a Member, someone on the PMC must nominate
      the Committer. The individual may then be approved with a 3/4 majority
      of the PMC.</para>
    </section>
  </section>

  <section id="bugs">
    <title>Bug Tracking</title>

    <para>During alpha development, issues are embedded into the code using
    <link linkend="inlinetasktracking">@task</link> tags which can be read
    from the maven output files.</para>

    <para>In future, bugs will be tracked using the <ulink
    url="http://sourceforge.net/tracker/?group_id=4091&#38;atid=104091">sourceforge
    bug tracking system for GeoTools</ulink>.</para>

    <section id="inlinetasktracking">
      <title>Inline Task Tracking</title>

      <para>You can place <computeroutput>@task</computeroutput> markers in
      the javadoc sections to track areas for rework. During the maven build
      process, the tags are extracted to build a report page. Example output
      can be viewed at: <ulink
      url="http://modules.geotools.org/core/task_list.html">http://modules.geotools.org/core/task_list.html</ulink>.
      Inline Task Tracking is particularly useful during development. After
      code has been released, bugs should be tracked using the Bug Tracker.</para>

      <para>The following tags are available:</para>

      <itemizedlist>
        <listitem>
          <para>TODO:</para>
        </listitem>

        <listitem>
          <para>REVISIT:</para>
        </listitem>

        <listitem>
          <para>HACK:</para>
        </listitem>
      </itemizedlist>

      <example>
        <title>Inline task tracking within a method</title>

        <programlisting>/**
 * This is an example method.
 * @param i This explains the variable.
 * @task TODO: This method should have some code.
 */
void example(int i) {
}</programlisting>
      </example>
    </section>
  </section>

  <section id="building">
    <title>Building</title>

    <section id="usingmaven">
      <title>Using Maven</title>

      <para>First off, what is maven? Maven is a &#34;Java project management
      and project comprehension tool&#34;, or in other words, yet another
      build tool.</para>

      <para>It is built on top of ant and a number of other open source
      utilities and brings them together in a in an easy to use tool.</para>

      <para>They key part of maven is the use of project files, you should now
      be able to find a project.xml file in all the active modules.</para>

      <para>The project file tells you the name of the module, who maintains
      it, who develops it, what version it has reached and what it depends on.
      Note that as all the modules have some things in common the module
      project files actually extend one which can be found in the GeoTools2
      root directory.</para>

      <para>The most important part of the project file is the dependencies
      section as maven uses this to determine what order to build the modules
      in and what support jars to download when needed. (If we move over to
      maven exclusively we will no longer need the extbin folder).</para>

      <section id="gettingmaven">
        <title>Getting Maven</title>

        <para>You will need Maven 1.0 beta 10 or later which you can download
        from: <ulink url="http://maven.apache.org/start/download.html">http://maven.apache.org/start/download.html</ulink>.</para>
      </section>

      <section id="installingmaven">
        <title>Installing Maven</title>

        <para>Unpack the archive you downloaded to a convenient location on
        your machine (c:\program files is good for windoze boxes)</para>

        <para>Set an environment variable called MAVEN_HOME to point to this
        location (e.g. c:\program files\maven-1.0-beta-8)</para>

        <para>Add MAVEN_HOME\bin to your systems PATH environment variable.</para>

        <para>Maven can require a lot of memory when building GT2, by default
        it has a limit of 128mb so this needs to be raised, to do this edit
        the maven.bat (Windows) or maven (*nix) file in the MAVEN_HOME/bin
        folder.</para>

        <para>Look for the : <command>SET MAVEN_OPTS=-Xmx128m</command></para>

        <para>And change it to: <command>SET MAVEN_OPTS=-Xmx256m</command></para>

        <para>You must also have the JAI extension from sun installed as it is
        required by a number of modules.</para>
      </section>

      <section id="mavenbuildall">
        <title>Using Maven to build ALL modules</title>

        <para>Most of the GT2 modules depend on other GT2 modules, so the
        first thing you will want to do is perform a full build so that you
        have a jar from each module installed in your local repository.</para>

        <para>Make sure you are connected to the internet, the do the
        following:</para>

        <programlisting>cd $GEOTOOLS_HOME/geotools2
maven build</programlisting>

        <para>All being well maven should download the required .jar files and
        build GeoTools modules. At the end of this process it will display a
        list of all the modules which were built and installed correctly.</para>

        <para>The first build takes a while due to the download time for the
        .jar files. Future builds check for the most recent .jar files from
        the internet, however you can bypass the checking and run maven
        offline using the following:</para>

        <programlisting>cd $GEOTOOLS_HOME/geotools2
maven build -o</programlisting>

        <para>To do: GeoTools2 still has some unit tests which require you to
        be connected to the internet while building. This should be fixed.</para>
      </section>

      <section id="mavenrepository">
        <title>The Maven local repository</title>

        <para>On your machine you will find a directory in MAVEN_HOME called
        repository, this is where maven stores all downloaded jars and
        installed projects.</para>

        <para>You should see that any third party jars, such as JTS, will have
        been installed in this repository, you should also see that all
        successful module builds have had their jars installed in a directory
        called gt2 (e.g. core, defaultcore...)</para>
      </section>

      <section id="indvidualmavenmodule">
        <title>Building an individual module</title>

        <para>Provided you have done at least one complete build you should be
        able to build individual modules.</para>

        <para>Change to the modules home directory (e.g.
        geotools-src\defaultcore) <command> Type &#39;maven java:compile&#39;</command></para>

        <para>It should do a complete build, note that if you have not done a
        full build yet then the build may fail because it can&#39;t find the
        jar for a module it depends on. An error caused by not having another
        GT2 module installed can be a little misleading, for example the error
        may look something like: <command>Error: unable to download
        core-0.1.jar</command>. This is because Maven failed to find
        core-0.1.jar in the local repository (where a full build should have
        put it) so it tried to download and fails. If you see an error like
        that either do a full build or change into the module which is missing
        (core in this case) and type</para>

        <para><command>maven jar:install</command></para>

        <para>This should build and install that individual module, all being
        well you should then be able to go back to the module you were trying
        to build and try again.</para>
      </section>

      <section id="mavenothers">
        <title>Doing things other than building</title>

        <para>In any individual module home you can type <command>maven -g</command>
        to see a full list of goals that can be run for that module. Handy
        examples include...</para>

        <variablelist>
          <varlistentry>
            <term><command>maven site</command></term>

            <listitem>
              <para>generates a web site in the target\docs folder which
              provides a LOT of information about the module.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><command>maven javadoc</command></term>

            <listitem>
              <para>generates the javadoc for the module, look in target for
              output) maven test.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><command>maven test</command></term>

            <listitem>
              <para>runs the tests, look in target/test-reports for output</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><command>maven jar:install</command></term>

            <listitem>
              <para>installs the module into the Maven repository for use by
              other modules</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="mavenprojectstructure">
        <title>Project File structure</title>

        <para>Maven uses a number of files to work out what to do, the most
        important as mentioned above are the project.xml files, there are
        however a few others, the layout is as follows:</para>

        <variablelist>
          <varlistentry>
            <term><filename>geotools2\project.xml</filename></term>

            <listitem>
              <para>the parent template project file which the module files
              extend.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><filename>geotools2\maven.xml</filename></term>

            <listitem>
              <para>a control file which marshals the building of ALL modules
              and will soon generate a full web-site.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><filename>geotools2\geotools-src\module\project.xml</filename></term>

            <listitem>
              <para>the specific project file for a given module</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><filename>geotools2\geotools-src\module\build.properties</filename></term>

            <listitem>
              <para>some control properties that will eventually be inherited
              from a parent, but not yet.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><filename>geotools2\geotools-src\module\target</filename></term>

            <listitem>
              <para>folder generated during builds that contains all output
              (classes, jars and reports)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><filename>geotools2\geotools-src\module\xdocs</filename></term>

            <listitem>
              <para>contains files such as logos or additional web pages that
              go into the web site</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="mavenprojectxmlstructure">
        <title>Project XML Structure</title>

        <para>Complete documentation for the project.xml file for maven can be
        found at the <ulink url="maven.apache.org">maven</ulink> site, and in
        particular in the <ulink
        url="http://maven.apache.org/reference/project-descriptor.html">project
        descriptor</ulink> part of the reference section. So, we only show
        that the things specific to a GeoTools2 module project.xml file here.</para>

        <variablelist>
          <varlistentry>
            <term>extend</term>

            <listitem>
              <para>The &#60;extend&#62; tag allows one project.xml file to
              inherit items from another. Modules should extend the
              project.xml within the top level GeoTools2 directory. Also, the
              path given to the other project.xml file mush begin with
              ${basedir} in order for maven to find it. For example:
              &#60;extend&#62;${basedir}/../../project.xml&#60;extend&#62;</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>id</term>

            <listitem>
              <para>The id should reflect the name of the module. However,
              because the main project.xml defined groupId to be gt2, there is
              no need to prepend a GeoTools prefix. Examples are core and
              defaultcore.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>dependency</term>

            <listitem>
              <para>Dependencies are specified within the project.xml file,
              but care should be taken. In a previous version of maven, the id
              was used to specify the jar file as well as the prefix, and so
              more than one jar was not allowed within a project. This has
              been fixed with the beta8 version of maven, but there are still
              many old style dependencies in the project files. New
              dependencies, and in particular any dependency on another
              GeoTools2 module should use the new style, which uses a groupId
              to identify the project and an artifactId to identify the jar
              within that project. ArtifactIds correspond to modules in
              GeoTools2. Also, be aware that dependencies are not transitive.
              In other words, suppose module B has a dependency on module A.
              If you are creating module C, and have a dependency on module B,
              then you do not automatically have a dependency on module A. If
              C depends on A, then you must add the dependency manually.</para>

              <example>
                <title>Sample project.xml dependency entry</title>

                <programlisting>&#60;dependency&#62;
  &#60;groupId&#62;gt2&#60;/groupId&#62;
  &#60;artifactId&#62;resources&#60;/artifactId&#62;
  &#60;version&#62;1.0&#60;/version&#62;
&#60;/dependency&#62;</programlisting>
              </example>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="mavenremotestructure">
        <title>Remote File Structure</title>

        <para>There is a repository of jars required by GeoTools2 stored on
        the sourceforge site, you can browse it online at: <ulink
        url="http://www.geotools.org/gt2modules/extbin">http://www.geotools.org/gt2modules/extbin</ulink></para>

        <para>If a module you are developing needs a third party jar to
        operate then this is the place to put it, the naming convention is:
        <filename>groupId/jars/artifactId-version.jar</filename> . The groupId
        usually corresponds to the name of the project, and the artifactId
        corresponds to the jar name. In many cases there is only one artifact
        within a group, and so they may be the same.</para>

        <para>You can find the remote repository on the shell sever
        (shell.sourceforge.net) at <filename>/home/groups/g/ge/geotools/htdocs/gt2modules/extbin</filename>
        it has group permissions set so you should be able to modify it if you
        have developer rights. Be sure to set the appropriate permissions so
        all can download it, and so other developers can modify it.</para>

        <para>So, for example, we use JTS version 1.0 in a number of modules,
        you can find this jar online at:<ulink
        url="http://www.geotools.org/gt2modules/extbin/JTS/jars/JTS-1.0.jar">http://www.geotools.org/gt2modules/extbin/JTS/jars/JTS-1.0.jar</ulink></para>

        <para>Which is stored on the server in <filename>/home/groups/g/ge/geotools/htdocs/gt2modules/extbin/JTS/jars/JTS-1.0.jar</filename>.
        Note that this is a case where the groupId and artifactId are the
        same, but they are not required to be.</para>

        <para>Any module which needs to depend on JTS will then have the
        following tag in its project.xml file:</para>

        <example>
          <title>Sample project.xml dependency entry</title>

          <programlisting>&#60;dependency&#62;
  &#60;groupId&#62;JTS&#60;/groupId&#62;
  &#60;artifactId&#62;JTS&#60;/artifactId&#62;
  &#60;version&#62;1.0&#60;/version&#62;
&#60;/dependency&#62;</programlisting>
        </example>
      </section>

      <section id="maventests">
        <title>Testing with Maven</title>

        <para>Maven complicates things on the logging front, as it does a lot
        of redirection. By default the logs from testing end up in
        <filename>target/test-reports</filename> of each module sub-directory.
        There should be XML and text files for the results of each test. Be
        sure to check both, as one of the wrinkles of maven makes it so the
        output isn&#39;t always exactly the same. To have maven display the
        logging as it tests instead of just writing to files set the
        <literal>maven.junit.usefile</literal> property to false. To set a
        property, you can either pass it in from the command line with the -D
        flag (<command>maven -D maven.junit.usefile=false</command>) or set it
        in the <filename>build.properties</filename> file (just add the line
        <command>maven.junit.usefile=false</command>).</para>

        <para>Another helpful testing hint: in order to run only one test,
        call <command>maven test:single</command> and set the test case
        property to the full name (<filename>org.geotools.package.ClassTest</filename>)
        of the test to run. If you are having problems with logging output
        levels be sure to read the <link linkend="logging">logging section</link>.</para>
      </section>
    </section>

    <section id="continuousbuild">
      <title>Continuous Build</title>

      <para>To do: Explain Continuous Build, with section explaining
      CruiseControl, (once we get it working).</para>
    </section>
  </section>

  <section id="design">
    <title>Design</title>

    <para>Designing involves laying out packages, classes and dependencies
    between them.</para>

    <section id="designdocumentation">
      <title>Design Document</title>

      <para>A design document should provide a brief overview of the design to
      help developers gain a quick understanding of the system. The design
      documentation is enhanced by using more diagrams and less text.</para>

      <para>Text in the design document should be written in docbook format.
      Refer to the documentation section for more details about using docbook.</para>
    </section>

    <section id="poseidon">
      <title>Poseidon UML</title>

      <para><ulink url="http://www.gentleware.com/products/index.php3">Poseidon</ulink>
      is a Unified Modeling Language (UML) editor which is good for writing
      class diagrams and generating stub classes during the design phase of
      development.</para>

      <para>Using Poseidon you can reverse engineer the GeoTools2 code and
      view class diagrams, javadocs and code using a powerful graphical
      interface. It is a good way to quickly navigate through the GeoTools2
      design. Poseidon can&#39;t reverse engineer too much of the code at once
      because it sometimes runs out of memory, and sometimes freezes (which is
      possibly due to running out of memory). Below is a few tips I used to
      import GeoTools2 files into Poseidon.</para>

      <variablelist>
        <varlistentry>
          <term>Increase Poseidon Memory Size</term>

          <listitem>
            <para>As explained in the <ulink
            url="http://www.gentleware.de/support/faq.pl#e33">Poseidon FAQ</ulink>,
            you can increase Poseidon memory by changing the parameter
            &#34;-Xmx 96m&#34; to &#34;-Xm192 m&#34; in the Poseidon startup
            script. This changes memory allocation from 96Meg to 192Meg.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Import a few modules at a time</term>

          <listitem>
            <para>For some reason, the <filename>cts-transform</filename>
            module has problems being imported with other modules. I imported
            the other modules by copying <filename>geotools2/geotools-src</filename>
            to a temporary directory, removed the <filename>geotools2/geotools-src/cts-transform</filename>
            directory, then imported <filename>geotools2/geotools-src</filename>.
            Afterwards, I imported <filename>geotools2/geotools-src/cts-transform</filename>
            separately.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Poseidon can be installed into <emphasis>Netbeans</emphasis> as a
      module. Refer to Poseidon download instructions for more details.</para>

      <para>Source diagrams used in the design documentation are stored in
      <filename>geotools2/design/</filename>.</para>

      <para>All diagrams are created with Poseidon 1.5 or greater which is not
      backwardly compatible with earlier versions.</para>

      <para>To do: Need to rework this section to focus on UML/design first
      and Poseidon second.</para>
    </section>
  </section>

  <section>
    <title>Integrated Development Environments (IDEs)</title>

    <para>IDEs aim to provide all functions a developer requires in one
    graphical tool.</para>

    <section id="netbeans">
      <title>Netbeans</title>

      <para><ulink url="http://www.netbeans.org">Netbeans</ulink> is a free
      java IDE which also provides a framework for adding extra functionality.
      GeoTools2 is developed using the same modular structure as Netbeans and
      we plan to integrate GeoTools into Netbeans. Sun have repackaged
      Netbeans and called it <ulink
      url="http://wwws.sun.com/software/sundev/jde/index.html">Sun ONE Studio</ulink>
      (previously Forte for J).</para>

      <section id="netbeansprerequisites">
        <title>Prerequisites</title>

        <para>Before setting up Netbeans for GeoTools development you need to:</para>

        <itemizedlist>
          <listitem>
            <para>Have ssh installed, and ssh key-value pairs set up so you do
            not need a password to access sourceforge CVS repository. See
            <link linkend="cvs">Code Versioning</link> for details.</para>
          </listitem>

          <listitem>
            <para>Have CVS installed.</para>
          </listitem>

          <listitem>
            <para>Have checked out the GeoTools2 CVS repository into a local
            directory on your computer.</para>
          </listitem>

          <listitem>
            <para>The GeoTools .jar files need to be created in the release
            directory, which is done by running the ant or maven build
            scripts. To do: I don&#39;t think this step is required any more.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="netbeanscompileoptions">
        <title>Compile Options</title>

        <para>As <link linkend="java">mentioned</link>, GeoTools needs to be
        compiled with a recent Java compiler. This is done from the following
        windows:</para>

        <para><command>Tools-&#62;Options-&#62;Building-&#62;Compiler Types</command><command>-&#62;External
        Compilation</command></para>

        <para>Set <command><command>Enable JDK 1.4 Source</command></command>
        to &#34;True&#34;.</para>
      </section>

      <section id="netbeansmodules">
        <title>Adding Modules</title>

        <para>A few modules should be added to the standard Netbeans install
        to help GeoTools development. For use installed from the Netbeans
        Update center use:</para>

        <itemizedlist>
          <listitem>
            <para><command>Tools-&#62;Update Center</command></para>
          </listitem>
        </itemizedlist>

        <para>For other modules use:</para>

        <itemizedlist>
          <listitem>
            <para><command>Tools-&#62;Options-&#62;IDE
            Configuration-&#62;System-&#62;Modules</command></para>
          </listitem>

          <listitem>
            <para>right click on <command>Modules</command></para>
          </listitem>

          <listitem>
            <para>select <command>add-&#62;Module</command></para>
          </listitem>

          <listitem>
            <para>select the relevant .jar file.</para>
          </listitem>
        </itemizedlist>

        <para>The following modules may be installed:</para>

        <itemizedlist>
          <listitem>
            <para><filename>View over a Filesystem</filename> is a &#34;must
            have&#34; module of Netbeans. It allows you to mount each module
            within CVS and is almost essential for GeoTools development within
            Netbeans. The default Netbeans only allows you to mount one source
            directory but GeoTools has a source directory for each GeoTools
            module.</para>
          </listitem>

          <listitem>
            <para><link linkend="jalopy">Jalopy</link> is a Source Code
            Formatter which should be used to ensure GeoTools code is written
            in a consistent style. Download the <ulink
            url="http://jalopy.sourceforge.net/download.html">zipped</ulink>
            .nbm file and install from a local directory.</para>

            <blockquote>
              <para><command>Tools-&#62;Update Center-&#62;Install Manually
              Downloaded Modules-&#62;&#60;select .nbm file&#62;</command></para>
            </blockquote>

            <para>After installing, refer to the <link linkend="jalopy">Jalopy</link>
            section to configure.</para>
          </listitem>

          <listitem>
            <para><ulink url="http://pmd.sourceforge.net">PMD</ulink> checks
            code for poor programming patterns. Download the zipped .nbm file
            and install from a local directory.</para>

            <blockquote>
              <para><command>Tools-&#62;Update Center-&#62;Install Manually
              Downloaded Modules-&#62;&#60;select .nbm file&#62;</command></para>
            </blockquote>

            <para>After installing, refer to the <link linkend="pmd">PMD</link>
            section to configure.</para>
          </listitem>

          <listitem>
            <para><filename>RefactorIt</filename> is a useful module for
            changing many classes at once, and provide a free license for open
            source projects like GeoTools. See <xref linkend="refactorit" />
            for more details. Installation instructions are in the download.</para>
          </listitem>

          <listitem>
            <para><filename>XML Editor</filename> is useful for editing and
            validating documentation and Geographic Markup Language (GML)
            files.</para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.gentleware.com/products/index.php3">Poseidon</ulink>
            is a Unified Modeling Language (UML) editor which we use to
            explain ideas about design. You can get away without installing
            this.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="netbeansmounting">
        <title>Mounting Directories</title>

        <variablelist>
          <varlistentry>
            <term>GeoTools Repository</term>

            <listitem>
              <para>You will need to mount the GeoTools2 repository. In the
              Explorer window, right click on Filesystems, select
              <command>Mount-&#62;Version Control-&#62;CVS</command>. Select
              the GeoTools2 directory that you have already booked out from
              CVS. Don&#39;t worry about the relative mount point, it will be
              covered by &#34;View over Filesystem&#34; below. You
              shouldn&#39;t need to change the CVS and ssh parameters, they
              will have been picked up correctly from when you booked GeoTools
              out from CVS manually.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Source files</term>

            <listitem>
              <para>If you want to debug files using Netbeans, you will need
              to mount the source module directories based on the root source
              directory of that module. To do this, you will need to ensure
              the &#34;View over FileSystem&#34; Netbeans module is installed.
              Select all <filename>geotools2/geotools-src/&#60;module_name&#62;/src</filename>
              directories in the Filesystem Explorer then select
              <command>Tools-&#62;Mount As New Filesystem</command>. If you
              are running any test or demonstration programs, you will mount
              their directories in a similar manner: Select
              <filename>geotools2/geotools-src/&#60;module_name&#62;/test</filename>
              then select <command>Tools-&#62;Mount As New Filesystem</command>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Target files</term>

            <listitem>
              <para>You should mount the <filename>.class</filename> files
              that maven builds. Maven, the java build tool, compiles classes
              into <filename>geotools2/geotools-src/&#60;module_name&#62;/target/classes/org/geotools/&#60;module&#62;/&#60;file&#62;.class</filename>.</para>

              <para>Again, you need to ensure the &#34;View over
              FileSystem&#34; Netbeans module is installed. Select all
              <filename>geotools2/geotools-src/&#60;module_name&#62;/target/classes</filename>
              directories in the Filesystem Explorer then select
              <command>Tools-&#62;Mount As New Filesystem</command>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>External Jar files</term>

            <listitem>
              <para>This project is dependent on a number of external
              packages. After running <literal>maven,</literal> you will be
              able to find jars for these external packages at:
              <filename>$MAVEN_HOME/repository/&#60;module&#62;/jars/*.jar</filename>.</para>

              <orderedlist>
                <listitem>
                  <para>First, mount the maven home directory as a local
                  directory:</para>

                  <blockquote>
                    <para>In the Explorer window, right click
                    <command>FileSystems</command> and select
                    <command>Mount-&#62;Local Directory</command>.</para>

                    <para>Select <filename>$MAVEN_HOME/repository</filename></para>
                  </blockquote>
                </listitem>

                <listitem>
                  <para>Select all the .jar files in $MAVEN_HOME:</para>

                  <blockquote>
                    <para>In the Explorer window, right click on the
                    MAVEN_HOME directory, select <command>Find</command>.</para>

                    <para>In the Search Criteria popup, select
                    <command>Type-&#62;Jar Files</command>.</para>

                    <para>Select all the jar files, right click, select
                    <command>Mount JAR</command>.</para>
                  </blockquote>
                </listitem>
              </orderedlist>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="netbeansprojects">
        <title>Using Projects</title>

        <para>After mounting all the directories from the previous section,
        your netbeans window explorer may be a bit crowded. You can create a
        manageable view of your classes by creating a project.</para>

        <para>Right click on your files or modules in the windows explorer,
        then select <command>Tools-&#62;Add to Project</command>.</para>

        <para>You can now view your files by selecting the <command>Project</command>
        tab in the explorer.</para>
      </section>

      <section id="netbeansbak">
        <title>Backup Configuration</title>

        <para>Netbeans occasionally gets into a funny state and refuses to
        debug, or execute, or something. So it is a good idea to backup your
        netbeans configuration directory. On &#39;nix systems you do something
        like:</para>

        <example>
          <title>Backup netbeans configuration (in unix)</title>

          <programlisting># change to your home directory
cd ~
# copy the netbeans configuration directory
cp -pr .netbeans/ .netbeans.bak</programlisting>
        </example>
      </section>
    </section>

    <section id="emacsjdee">
      <title>Emacs and JDEE</title>

      <para><ulink url="http://www.gnu.org/software/emacs/">Emacs</ulink> is
      not a Java IDE, however it can be treated like multi-language IDE
      without a GUI builder. If you are not a GUI designer or developer emacs
      is well worth considering for a software development environment.</para>

      <para>The most important features for GeoTools developers (most of them
      provided by JDEE) are:</para>

      <itemizedlist>
        <listitem>
          <para>Efficient and extremely customizable editor which supporting
          almost all programming and natural languages.</para>
        </listitem>

        <listitem>
          <para>Excellent Java support provided by <ulink
          url="http://jdee.sunsite.dk/">Java Development Environment for Emacs
          (JDEE)</ulink>. JDEE provides all standard features provided by
          dedicated Java IDEs like class browsing, code completion, imports
          management and so on. In many cases built in wizards and code
          templates makes emacs better.</para>
        </listitem>

        <listitem>
          <para>Built in Java code formatter and interface to <link
          linkend="jalopy">Jalopy</link>. It is worth noting that the
          &#34;native&#34; JDEE code formatter has capabilities almost equal
          to Jalopy&#39;s and with a little time spent on configuration you
          can have on-line code formating.</para>
        </listitem>

        <listitem>
          <para>Java-Doc generator and Java-Doc browser.</para>
        </listitem>

        <listitem>
          <para>Java-Debug built-in interface and remote debugging support.</para>
        </listitem>

        <listitem>
          <para>Doc-Book support. You can use emac&#39;s default simple
          support or full SGML and XML support provided by <ulink
          url="http://sourceforge.net/projects/psgml/">PSGML</ulink>.</para>
        </listitem>

        <listitem>
          <para>Built in CVS support.</para>
        </listitem>
      </itemizedlist>

      <section id="getinsconf">
        <title>Getting, installing and configuring software</title>

        <para>Emacs and JDEE work best on Linux and other Unix like systems.
        It is possible to use all features of emacs on Windows machine but it
        requires additional software and effort.</para>

        <section id="getemacs">
          <title>Below is list of locations for necessary software.</title>

          <variablelist>
            <varlistentry>
              <term>Emacs for Linux users</term>

              <listitem>
                <para>In most cases emacs should be installed with
                distribution. If not, search package list for your
                distribution and install emacs separately.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Emacs for Windows users</term>

              <listitem>
                <para>I suggest you download full precompiled binaries
                <quote>fullbin</quote> from <ulink
                url="http://ftp.gnu.org/gnu/windows/emacs/latest/">
                http://ftp.gnu.org/</ulink>. This directory contains source
                and full emacs, elisp documentation. The easiest way to make
                emacs fully functional is to install <ulink
                url="http://www.cygwin.com/">CygWin</ulink>. CygWin provides a
                Unix environment under windows. CygWin contains an emacs
                package but the native install contains configuration problems
                relating to ANT and Java so I don&#39;t recommend it.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Emacs for other systems or source lovers</term>

              <listitem>
                <para><ulink url="http://ftp.gnu.org/gnu/emacs/">Sources and
                manuals</ulink></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>JDEE - Java Development Environment for Emacs</term>

              <listitem>
                <para><ulink url="http://jdee.sunsite.dk/">JDEE</ulink>
                project main page. The best source for all necessary
                information about JDEE.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>CygWin - UNIX environment for Windows</term>

              <listitem>
                <para><ulink url="http://www.cygwin.com/">CygWin</ulink>
                project main page. It contains link to last available
                <filename>setup.exe</filename> CygWin installation program.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><filename>install-jde.sh</filename> - automatic installer
              of JDEE and all required libraries.</term>

              <listitem>
                <para><ulink
                url="http://wttools.sourceforge.net/emacs-stuff/package.html#install-jdee">
                JDEE installation script</ulink> with some additional
                information about using it in particular cases.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section id="inst">
          <title>Installation procedure for each piece of software</title>

          <para>I work on the same Java projects on machines with Linux and
          Windows+CygWin systems. So I will present configuration options
          necessary to use it transparently regardless of the environment you
          use.</para>

          <para>Emacs installation is really simple. Put it in any convenient
          location on HDD and make it available using the system environment
          variable: &#34;PATH&#34;. On Unix like system emacs is Plug and Play
          software and without any additional effort it can be used
          immediately after installation. For use of JDEE and Java look in
          <link linkend="envvar">environment variables</link> setting
          description.</para>

          <para>There are some tricks to use it on windows system with CygWin
          so I will describe it with all details. Below are step by step
          instructions:</para>

          <orderedlist>
            <listitem>
              <para>Run <ulink url="http://www.cygwin.com/setup.exe">
              setup.exe</ulink> - CygWin installation program. All default
              settings should be good for our needs even default packages set
              is sufficient. I am not sure if <filename>libxslt</filename> is
              installed in basic - default set. To ensure go to
              <filename>Text</filename> category, expand it and check
              <filename>libxslt</filename> package.</para>
            </listitem>

            <listitem>
              <para>Unpack downloaded emacs binaries to CygWin root directory
              <filename>d:/gnu</filename> in my case. Because emacs binaries
              are packed with <filename>gzip</filename> and gnu
              <filename>tar</filename> tools the easiest way to unpack emacs
              package is to run CygWin console and execute following commands:</para>

              <example id="emacsunpack">
                <title>Unpacking emacs binaries in CygWin root.</title>

                <programlisting># assuming downloaded emacs binaries are
# stored in c:\tmp\emacs-21.2-fullbin-i386.tar.gz
cd /
tar -xzvf /cygdrive/c/tmp/emacs-21.2-fullbin-i386.tar.gz</programlisting>
              </example>
            </listitem>

            <listitem>
              <para>Put <filename>install-jde.sh</filename> script in your
              CygWin home directory and run it. (If you are an experienced
              emacs user, look in information at the beginning of the script
              about how to customize it.) It is necessary to make emacs
              binaries available in PATH environment variable or set full path
              name to emacs at the beginning of the script.</para>
            </listitem>
          </orderedlist>

          <para>All the most necessary components are now installed. To use
          them effectively some customization should be done.</para>
        </section>

        <section id="conf">
          <title>Step by step configuration</title>

          <para>System, CygWin, emacs and JDEE customization hints.</para>

          <orderedlist>
            <listitem id="envvar">
              <para>On Windows systems some variables should be set in system
              level and others in CygWin level. On Unix systems all variables
              can be set from user startup - profile files. On Windows they
              must be separated because CygWin paths are Unix-like and CygWin
              root directory starts in CygWin installation directory. So some
              programs will use Windows paths and others will use CygWin
              paths.</para>

              <para>To set environment variable on system level right-click on
              <systemitem class="resource">My-Computer</systemitem> and choose
              <systemitem class="resource">Properties</systemitem>. Go to
              <systemitem class="resource">Advanced</systemitem> tab and click
              on <systemitem class="resource"> System environment</systemitem>
              button.</para>

              <para>To set environment variable on CygWin level or on all
              levels in native Unix system add the following to your
              <filename>.bashrc</filename> file:</para>

              <example id="sysvarsex">
                <title>System level variables list with sample values.</title>

                <programlisting>JAVA_HOME=d:/jdk1.4.1
ANT_HOME=d:/projects/jakarta-ant-1.5.1
MAVEN_HOME=d:/projects/maven-1.0-beta-8
PROJECTS_HOME=d:/projects</programlisting>

                <para>On Unix like system above variables should be set to
                proper Unix file system locations.</para>
              </example>

              <example id="cygvarsex">
                <title>CygWin level variables list with sample values.</title>

                <programlisting>export PATH=&#34;/emacs-21.2/bin:$PATH&#34;
export CVS_RSH=&#39;ssh&#39;
export CVSROOT=&#34;:ext:user@cvs.geotools.sourceforge.net:/cvsroot/geotools&#34;

# Unix users should uncomment lines below:

# export JAVA_HOME=/usr/local/jdk1.4.1
# export ANT_HOME=/usr/local/jakarta-ant-1.5.1
# export MAVEN_HOME=/usr/local/maven-1.0-beta-8
# export PROJECTS_HOME=$HOME/projects</programlisting>

                <para>For <systemitem class="constant">CVSROOT</systemitem>,
                replace <systemitem class="username"><literal>user</literal></systemitem>
                with your Source Forge user name.</para>
              </example>
            </listitem>

            <listitem>
              <para>To start emacs with your home directory set to CygWin home
              directory and make visible some CygWin variables for emacs, add
              the following script to your CygWin root directory:</para>

              <example id="startemacs">
                <title>Script for starting emacs - <filename>D:\gnu\startemacs.bat</filename></title>

                <programlisting>@echo off
d:
chdir d:\gnu\bin
set HOME=/home/Administrator
start &#34;Emacs console&#34; /min bash --login -c -c &#34;/emacs-21.2/bin/emacs&#34;</programlisting>
              </example>
            </listitem>

            <listitem>
              <para>Main emacs configuration file <filename>.emacs</filename>
              is located in your home directory. Example below present sample
              file with necessary settings and some number of not necessary
              but very useful especially for emacs beginners.</para>

              <example id="emacsdot">
                <title>Sample <filename>.emacs</filename> content.</title>

                <informaltable frame="none">
                  <tgroup align="center" cols="2" colsep="1" rowsep="1">
                    <tbody>
                      <row>
                        <entry><ulink
                        url="http://wttools.sourceforge.net/emacs-stuff/emacs.html">emacs.html</ulink></entry>

                        <entry><ulink
                        url="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/*checkout*/wttools/wttools/emacs-stuff/.emacs?rev=HEAD&#38;content-type=text/plain">.emacs</ulink></entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>

                <para>It is rather big sample file, so to prevent scrolling
                through the number of lines of lisp code I have made my
                <filename>.emacs</filename> working file available on web
                page. I tried to make them readable and well commented.
                Especially with every external package used I have also added
                URL to place where the last version is available.</para>
              </example>
            </listitem>

            <listitem>
              <para>If you work on several projects with different settings
              (like coding standards), you will appreciate the power of emacs
              and JDEE. This is one of the biggest advantages emacs has over
              other IDEs.</para>

              <para>JDEE has it&#39;s own configuration file where you can set
              all possible project options. If some of them are common for all
              projects than they can be moved to <filename>.emacs</filename>
              file. If you are working on Java code and you have opened Java
              file, JDEE looks for project configuration file -
              <filename>prj.el</filename> in current directory and all parent
              directories. Project file located in current directory inherits
              all parameters from projects files in parent directories and of
              course from <filename>.emacs</filename> file. So it is possible
              to customize each package if necessary. For example you can set
              a different class as main executable class for each package.
              Anyway below I present sample JDEE project file with almost all
              common settings:</para>

              <example id="prjfile">
                <title>Sample <filename>prj.el</filename> file.</title>

                <informaltable frame="none">
                  <tgroup align="center" cols="2" colsep="1" rowsep="1">
                    <tbody>
                      <row>
                        <entry><ulink
                        url="http://wttools.sourceforge.net/emacs-stuff/prj.html">
                        jde.html</ulink></entry>

                        <entry><ulink
                        url="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/*checkout*/wttools/wttools/emacs-stuff/prj.el?rev=HEAD&#38;content-type=text/plain">
                        jde.el</ulink></entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>

                <para>As you can see, it is possible to use environment
                variables in <filename>prj.el</filename> file. With this
                feature it is not a problem to have the one project file for
                all operating systems you use.</para>
              </example>
            </listitem>
          </orderedlist>
        </section>
      </section>

      <section id="usethis">
        <title>How to use this stuff</title>

        <para>Many commands are available through main and context menu.
        Others are not. I will present below how to effectively use all of
        them from the keyboard and how quickly find necessary function name.</para>
      </section>

      <section id="isworking">
        <title>Is it working?</title>

        <para>If you already installed all the software, you should check if
        it works first. The easiest way to check your JDEE installation is to
        load any Java file. If you can see new <systemitem class="resource">Menu</systemitem>
        element called JDE it means <systemitem class="resource">JDEE</systemitem>
        mode is selected and activated.</para>
      </section>

      <section id="jdecodeformat">
        <title>Formating code and using Jalopy</title>

        <para>There is one package allowing you to use <systemitem
        class="library">Jalopy</systemitem> from emacs with JDEE. This is
        <systemitem class="library">jde-jalopy</systemitem>. It is not part of
        JDEE yet, so must be downloaded separately from <ulink
        url="http://home.nc.rr.com/nascifandelaine/jde-jalopy.el">it&#39;s
        home page</ulink>.</para>

        <para>To make it functional in your installation do as follows:</para>

        <orderedlist>
          <listitem>
            <para>It needs <systemitem class="library">Jalopy</systemitem>
            console plug-in package available on <ulink
            url="http://jalopy.sourceforge.net/download.html">project download
            page</ulink>. So get it and unpack in some convenient for you
            place. For my case it is <filename>$PROJECTS_HOME/jalopy-1.0.2/</filename>
            directory.</para>
          </listitem>

          <listitem>
            <para>Put <filename>jde-jalopy.el</filename> file in your custom
            packages location. Make sure it is in your emacs <quote>load path</quote>.
            And add to <filename>.emacs</filename>:</para>

            <example>
              <title>Loading package <systemitem class="library">jde-jalopy</systemitem>
              in to emacs/jdee environment.</title>

              <programlisting>;;; If it is in different than others package
;;; directory you must add this location to emacs load path
(add-to-list &#39;load-path &#34;~/.emacs.d/jde-jalopy/location&#34;)
;;; Make jde-jalopy available under emacs
(require &#39;jde-jalopy)</programlisting>
            </example>
          </listitem>

          <listitem>
            <para>Some jalopy options are global to all your projects and some
            can vary between projects. Global options should be placed in
            <filename>.emacs</filename> and the rest should go to
            <filename>prj.el</filename> files.</para>

            <example>
              <title>Global Jalopy settings in <filename>.emacs</filename>.</title>

              <programlisting>(custom-set-variables
 &#39;(jde-jalopy-option-path &#34;$PROJECTS_HOME/jalopy-1.0.2&#34;)
 &#39;(jde-jalopy-option-force t)
)</programlisting>

              <para>Please note that can be only one expression with
              <command>custom-set-variables</command> in your
              <filename>.emacs</filename> file. If there is already such
              expression you should only append to it lines with parameters.</para>
            </example>

            <example>
              <title>Project local Jalopy settings in <filename>prj.el</filename>.</title>

              <programlisting>(jde-set-variables
 &#39;(jde-jalopy-option-preferences-file
   &#34;$PROJECTS_HOME/geotools2/geotools-src/docs/sdocbook/resources/jalopygeotools.xml&#34;)
)</programlisting>
            </example>

            <para>As in above example if there is already <command>jde-set-variables</command>
            expression in your <filename>prj.el</filename> file add your
            settings to existing list instead of creating new one.</para>
          </listitem>
        </orderedlist>

        <para>Now you can start using it. When you are editing Java file and
        want to use Jalopy for it run command <command>jde-jalopy-file</command>
        (<userinput>M-x jde-jalopy-file</userinput>). Compilation buffer will
        open and you can see messages Jalopy generates during formating.
        Current version does not automatically refreshes changes in emacs
        buffer so you must <quote>revert buffer</quote> to see changes and
        work on file when formating is done.</para>
      </section>

      <section id="jdecommands">
        <title>Common commands table</title>

        <para>I have put here table with the most important and often used
        functions of JDEE. Of course you can find all available functions in
        both off-line and on-line JDEE documentation. But I find it useful to
        have the most important functions in a table. In most cases
        descriptions were fully or partially copied from the original JDEE
        documentation. So for many of them you can find more information in
        on-line JDEE documentation using: <userinput>Alt-x describe-function</userinput>,
        then <userinput>ENTER</userinput>, then write function name.</para>

        <para>To see all JDEE key-bindings, call the function
        <command>jde-keys</command> under emacs. (<userinput>Alt-x jde-keys</userinput>)</para>

        <table frame="all">
          <title>Most often used commands quick reference table.</title>

          <tgroup cols="3" colsep="1" rowsep="1">
            <thead valign="middle">
              <row>
                <entry>Function name</entry>

                <entry>Keys binding</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody valign="middle">
              <row>
                <entry><command>jde-keys</command></entry>

                <entry><literallayout format="linespecific"><userinput> none </userinput></literallayout></entry>

                <entry>Displays JDEE key bindings.</entry>
              </row>

              <row>
                <entry><command>jde-bug-keys</command></entry>

                <entry><literallayout format="linespecific"><userinput> none </userinput></literallayout></entry>

                <entry>Displays JDEbug key-bindings.</entry>
              </row>

              <row>
                <entry><command>describe-bindings</command></entry>

                <entry><literallayout format="linespecific"><userinput> none </userinput></literallayout></entry>

                <entry>Show a list of all emacs defined keys, and their
                definitions.</entry>
              </row>

              <row>
                <entry><command>jde-abbrev-mode</command></entry>

                <entry><literallayout format="linespecific"><userinput> none </userinput></literallayout></entry>

                <entry>It is not used indeed. Abbreviations in JDEE are very
                powerful and you should always have JDEE abbreviations turned
                ON. To turn them permanently on you don&#39;t have to use this
                function. Set value of <command>jde-enable-abbrev-mode</command>
                variable to true in your <filename>.emacs</filename> or
                <filename>prj.el</filename> file instead. Look in <ulink
                url="#abbrtab"><xref linkend="abbrtab" /></ulink> for more
                details.</entry>
              </row>

              <row>
                <entry><command>next-error</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-x ` </userinput></literallayout></entry>

                <entry>Visit next compilation error message and corresponding
                source code.</entry>
              </row>

              <row>
                <entry><command>jde-find</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-f </userinput></literallayout></entry>

                <entry>Find a regular expression REGEXP in all of the files in
                the current JDE project.</entry>
              </row>

              <row>
                <entry><command>jde-open-class-at-point</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-y </userinput></literallayout></entry>

                <entry>Find definition for symbol under cursor. Opens the
                java-file which defines the class where current point is and
                jumps to the definition of current thing at point (this can be
                a variable name, class name, method name, attribute name).</entry>
              </row>

              <row>
                <entry><command>jde-complete-in-line</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v . </userinput></literallayout></entry>

                <entry>Completes the method or field name at point. Repeating
                the command cycles through all potential completions for the
                name. This function displays the signature of a method
                completion as specified by
                `jde-complete-display-current-signature&#39;</entry>
              </row>

              <row>
                <entry><command>jde-complete</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-. </userinput></literallayout></entry>

                <entry>Displays completions for the Java symbol at point.
                Depends on user settings possible completions can be displayed
                as context menu or in minibufer.</entry>
              </row>

              <row>
                <entry><command>jde-gen-try-catch-wrapper</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v t </userinput></literallayout></entry>

                <entry>Wrap the region from BEG to END into a try/catch block.
                BEG and END are modified so the region only contains complete
                lines.</entry>
              </row>

              <row>
                <entry><command>jde-gen-try-finally-wrapper</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v f </userinput></literallayout></entry>

                <entry>Wrap the region from BEG to END into a try/finally
                block. BEG and END are modified so the region only contains
                complete lines.</entry>
              </row>

              <row>
                <entry><command>jde-import-find-and-import</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-z </userinput></literallayout></entry>

                <entry>Insert an import statement for a class in the current
                buffer. CLASS is an unqualified class name. This function
                searches the classpath for a class (or classes) that match
                CLASS. If it finds only one, it inserts an import statements
                for the class at the head of the current buffer. If it finds
                more than one class that matches CLASS, it prompts you to
                select which class to import.</entry>
              </row>

              <row>
                <entry><command>jde-show-superclass-source</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-x </userinput></literallayout></entry>

                <entry>Show the source for the parent of the class at point.</entry>
              </row>

              <row>
                <entry><command>jde-wiz-update-class-list</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-q </userinput></literallayout></entry>

                <entry>Update the class list used to resolve class names. The
                first time you invoke a JDEE wizard, the JDEE builds a list of
                all classes on the <systemitem class="resource">CLASSPATH</systemitem>
                defined by <systemitem class="resource">jde-global-classpath</systemitem>.
                Wizards use this list to resolve unqualified class names. If
                you add any classes to the <systemitem class="resource">CLASSPATH</systemitem>
                after invoking a wizard, you should update the class list.</entry>
              </row>

              <row>
                <entry><command>jde-gen-println</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-l </userinput></literallayout></entry>

                <entry>Insert println statement.</entry>
              </row>

              <row>
                <entry><command>jde-compile</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-c </userinput></literallayout></entry>

                <entry>Compile the Java program in the current buffer. This
                command invokes the compiler specified by `jde-compiler&#39;
                with the options specified by the JDE customization variables
                that begin with `jde-compile&#39;.</entry>
              </row>

              <row>
                <entry><command>jde-build</command></entry>

                <entry><literallayout format="linespecific"><userinput> C-c C-v C-b </userinput></literallayout></entry>

                <entry>Rebuild the entire project. This command invokes the
                function defined by `jde-build-function&#39;.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section id="abbrtab">
        <title>Abbreviations available in JDEE</title>

        <para>This is list of abbreviations taken from version of JDEE -
        2.3.2. To see list of abbreviations in your current version execute
        <command>describe-variable</command> emacs function with parameter
        <command>jde-mode-abbreviations</command>: <userinput>Alt-x
        describe-variable</userinput>, then <userinput>ENTER</userinput>, then
        <userinput>jde-mode-abbreviations</userinput>.</para>

        <table frame="all">
          <title>JDEE abbreviations table.</title>

          <tgroup align="center" cols="6" colsep="1" rowsep="1">
            <thead>
              <row>
                <entry>Abbreviation</entry>

                <entry>Expansion</entry>

                <entry>Abbreviation</entry>

                <entry>Expansion</entry>

                <entry>Abbreviation</entry>

                <entry>Expansion</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><userinput>ab</userinput></entry>

                <entry><command>abstract</command></entry>

                <entry><userinput>bo</userinput></entry>

                <entry><command>boolean</command></entry>

                <entry><userinput>br</userinput></entry>

                <entry><command>break</command></entry>
              </row>

              <row>
                <entry><userinput>by</userinput></entry>

                <entry><command>byte</command></entry>

                <entry><userinput>byv</userinput></entry>

                <entry><command>byvalue</command></entry>

                <entry><userinput>cas</userinput></entry>

                <entry><command>cast</command></entry>
              </row>

              <row>
                <entry><userinput>ca</userinput></entry>

                <entry><command>catch</command></entry>

                <entry><userinput>ch</userinput></entry>

                <entry><command>char</command></entry>

                <entry><userinput>cl</userinput></entry>

                <entry><command>class</command></entry>
              </row>

              <row>
                <entry><userinput>co</userinput></entry>

                <entry><command>const</command></entry>

                <entry><userinput>con</userinput></entry>

                <entry><command>continue</command></entry>

                <entry><userinput>de</userinput></entry>

                <entry><command>default</command></entry>
              </row>

              <row>
                <entry><userinput>dou</userinput></entry>

                <entry><command>double</command></entry>

                <entry><userinput>el</userinput></entry>

                <entry><command>else</command></entry>

                <entry><userinput>ex</userinput></entry>

                <entry><command>extends</command></entry>
              </row>

              <row>
                <entry><userinput>fa</userinput></entry>

                <entry><command>false</command></entry>

                <entry><userinput>fi</userinput></entry>

                <entry><command>final</command></entry>

                <entry><userinput>fin</userinput></entry>

                <entry><command>finally</command></entry>
              </row>

              <row>
                <entry><userinput>fl</userinput></entry>

                <entry><command>float</command></entry>

                <entry><userinput>fo</userinput></entry>

                <entry><command>for</command></entry>

                <entry><userinput>fu</userinput></entry>

                <entry><command>future</command></entry>
              </row>

              <row>
                <entry><userinput>ge</userinput></entry>

                <entry><command>generic</command></entry>

                <entry><userinput>go</userinput></entry>

                <entry><command>goto</command></entry>

                <entry><userinput>impl</userinput></entry>

                <entry><command>implements</command></entry>
              </row>

              <row>
                <entry><userinput>impo</userinput></entry>

                <entry><command>import</command></entry>

                <entry><userinput>ins</userinput></entry>

                <entry><command>instanceof</command></entry>

                <entry><userinput>in</userinput></entry>

                <entry><command>int</command></entry>
              </row>

              <row>
                <entry><userinput>inte</userinput></entry>

                <entry><command>interface</command></entry>

                <entry><userinput>lo</userinput></entry>

                <entry><command>long</command></entry>

                <entry><userinput>na</userinput></entry>

                <entry><command>native</command></entry>
              </row>

              <row>
                <entry><userinput>ne</userinput></entry>

                <entry><command>new</command></entry>

                <entry><userinput>nu</userinput></entry>

                <entry><command>null</command></entry>

                <entry><userinput>pa</userinput></entry>

                <entry><command>package</command></entry>
              </row>

              <row>
                <entry><userinput>pri</userinput></entry>

                <entry><command>private</command></entry>

                <entry><userinput>pro</userinput></entry>

                <entry><command>protected</command></entry>

                <entry><userinput>pu</userinput></entry>

                <entry><command>public</command></entry>
              </row>

              <row>
                <entry><userinput>re</userinput></entry>

                <entry><command>return</command></entry>

                <entry><userinput>sh</userinput></entry>

                <entry><command>short</command></entry>

                <entry><userinput>st</userinput></entry>

                <entry><command>static</command></entry>
              </row>

              <row>
                <entry><userinput>su</userinput></entry>

                <entry><command>super</command></entry>

                <entry><userinput>sw</userinput></entry>

                <entry><command>switch</command></entry>

                <entry><userinput>sy</userinput></entry>

                <entry><command>synchronized</command></entry>
              </row>

              <row>
                <entry><userinput>th</userinput></entry>

                <entry><command>this</command></entry>

                <entry><userinput>thr</userinput></entry>

                <entry><command>throw</command></entry>

                <entry><userinput>throw</userinput></entry>

                <entry><command>throws</command></entry>
              </row>

              <row>
                <entry><userinput>tra</userinput></entry>

                <entry><command>transient</command></entry>

                <entry><userinput>tr</userinput></entry>

                <entry><command>true</command></entry>

                <entry><userinput>vo</userinput></entry>

                <entry><command>void</command></entry>
              </row>

              <row>
                <entry><userinput>vol</userinput></entry>

                <entry><command>volatile</command></entry>

                <entry><userinput>wh</userinput></entry>

                <entry><command>while</command></entry>

                <entry></entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
  </section>

  <section id="codingstandards">
    <title>Coding Conventions</title>

    <para>Coding conventions describe the coding styles developers should use
    when writing code. For example, whether you use 2, 4, or 8 space indents.
    Standardizing on a coding style across a project improves legibility of
    the code, and automatic code formatters make conforming to these standards
    easy.</para>

    <section id="jalopy">
      <title>Jalopy</title>

      <para><ulink url="http://jalopy.sourceforge.net">Jalopy</ulink> is a
      source code formatter for Java. It lays out any valid Java source code
      according to configurable rules to meet a coding style without putting a
      formatting burden on individual developers.</para>

      <para>Jalopy can be integrated into a number of IDEs, and a
      project&#39;s coding convensions can be stored centrally and imported by
      all developers. Installation is straight forward, refer to the Jalopy
      documentation for details.</para>

      <para>Each developer should setup Jalopy in their prefered IDE and then
      import this project&#39;s coding convensions, <ulink
      url="resources/jalopygeotools.xml">jalopygeotools.xml</ulink>. These
      convensions are based on <ulink
      url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Sun&#39;s
      coding standards</ulink>.</para>

      <section id="jalopyconfiguration">
        <title>Jalopy Configuration</title>

        <para>This section details the modifications we made to the Jalopy
        default configuration. The Jalopy default configuration is based on
        the <ulink
        url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Sun
        Java Coding Conventions</ulink>.</para>

        <variablelist>
          <varlistentry>
            <term>General</term>

            <listitem>
              <table>
                <title>General</title>

                <tgroup cols="2">
                  <tbody>
                    <row>
                      <entry>Name</entry>

                      <entry>Geotools</entry>
                    </row>

                    <row>
                      <entry>Description</entry>

                      <entry>Geotools Java Coding Conventions</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Braces</term>

            <listitem>
              <para>None</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>White Space</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Indentation</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Wrapping</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Blank lines</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Comments</term>

            <listitem>
              <table>
                <title>Comments</title>

                <tgroup cols="2">
                  <tbody>
                    <row>
                      <entry>Format multi-line</entry>

                      <entry>Yes (was No)</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Imports</term>

            <listitem>
              <para>None.</para>

              <table>
                <title>Imports</title>

                <tgroup cols="2">
                  <tbody>
                    <row>
                      <entry>Default Grouping Depth</entry>

                      <entry>0 (was 3)</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Environment</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Javadoc</term>

            <listitem>
              <table>
                <title>Javadoc</title>

                <tgroup cols="2">
                  <tbody>
                    <row>
                      <entry>Pass/Format Comments</entry>

                      <entry>Yes (was No)</entry>
                    </row>

                    <row>
                      <entry>Correct tags</entry>

                      <entry>Yes (was No)</entry>
                    </row>

                    <row>
                      <entry>Correct @throws tags</entry>

                      <entry>Yes (was No)</entry>
                    </row>

                    <row>
                      <entry>Custom tags</entry>

                      <entry>@task</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Header</term>

            <listitem>
              <table>
                <title>Header</title>

                <tgroup cols="2">
                  <tbody>
                    <row>
                      <entry>Use Header</entry>

                      <entry>Yes (was No)</entry>
                    </row>

                    <row>
                      <entry>Delete Headers (This ensures multiple headers are
                      not put in every time Jalopy is run)</entry>

                      <entry>Geotools2 - OpenSource mapping toolkit</entry>
                    </row>

                    <row>
                      <entry>Text</entry>

                      <entry><programlisting>/*
 *    Geotools2 - OpenSource mapping toolkit
 *    http://geotools.org
 *    (C) 2002, Geotools Project Managment Committee (PMC)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 */</programlisting></entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Footer</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sorting</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Misc</term>

            <listitem>
              <para>None.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Code Inspector</term>

            <listitem>
              <table>
                <title>Code Inspector</title>

                <tgroup cols="2">
                  <tbody>
                    <row>
                      <entry>Enable Code Inspector</entry>

                      <entry>Yes (was No)</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section id="pmd">
      <title>PMD</title>

      <para><ulink url="http://pmd.sourceforge.net">PMD</ulink> automatically
      checks code for poor programming patterns.</para>

      <para>To do: Reference PMD configuration file. Explain the patterns that
      are checked.</para>
    </section>

    <section id="directorynames">
      <title>Directory Naming Conventions</title>

      <para>Directory names shall be all lower case with no spaces. Some
      versions of windows do not distinguish between upper and lower case, and
      in unix, writing spaces in filenames is painful.</para>
    </section>

    <section id="classnaming">
      <title>Class Naming Conventions</title>

      <figure>
        <title>Interface and Class naming conventions</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/developersguide/NamingConvensions.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Geotools provides interfaces in the <filename>geotools-src/core</filename>
      and classes which instantiate these interfaces which usually reside in
      <filename>geotools-src/defaultcore</filename>. By convention, the
      interface should be called <filename>XXX.java</filename> class should be
      called <filename>XXXImpl.java</filename>.</para>
    </section>

    <section id="moduledirstructure">
      <title>Module Directory Structure</title>

      <para>Geotools derived its directory structure from <ulink
      url="http://www.netbeans.org">Netbeans</ulink>.</para>

      <para>A module may contain the following directories and files:</para>

      <itemizedlist>
        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/src/org/geotools/&#60;dir&#62;/*.java</filename></para>

          <para>This is where source files are kept. <filename>&#60;dir&#62;</filename>
          is usually the same or derives it&#39;s name from &#60;module&#62;.</para>
        </listitem>

        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/tests/unit/org/geotools/&#60;module&#62;/*.java</filename></para>

          <para>This directory contains unit tests.</para>
        </listitem>

        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/tests/testdata/*</filename></para>

          <para>This directory contains data to be used by tests.</para>
        </listitem>

        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/sdocbook/*.sgml</filename></para>

          <para>This directory contains documentation about the module in
          Simple Docbook format.</para>

          <para>Documentation will usually be part of an existing geotools
          module. For general documentation (like the Developer&#39;s Guide),
          a dedicated module may be created which does not contain any code.</para>

          <figure>
            <title>Typical Documentation Directory Structure</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/developersguide/dir_structure.png"
                format="PNG" />
              </imageobject>

              <textobject>
                <phrase>Typical Documentation Directory Structure</phrase>
              </textobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/sdocbook/images/&#60;modules&#62;/*.sgml</filename></para>

          <para>This directory contains images for the documentation.</para>

          <para>Documentation from all modules are often built into one target
          directory. Therefore, to ensure module&#39;s images do not overwrite
          each other, images are stored in a directory below the images
          directory, in<filename>images/&#60;module_name&#62;/*.png</filename>.</para>
        </listitem>

        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/build-mavin.xml</filename></para>

          <para><filename>build-mavin.xml</filename> will eventually become
          <filename>build.xml</filename>. This file provides tools for
          building the module using <filename>ant</filename> and
          <filename>maven</filename>.</para>
        </listitem>

        <listitem>
          <para><filename>geotools2/geotools-src/&#60;module&#62;/project.xml</filename></para>

          <para><filename>project.xml</filename> provides metadata about the
          module for <filename>maven</filename>.</para>
        </listitem>

        <listitem>
          <para><filename>geotools2/extbin/&#60;module&#62;/*.jar</filename></para>

          <para>This contains the libraries required to compile
          &#60;module&#62;.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Exception Handling Policy</title>

      <para>To do: Write this. Ideally some large project will offer their
      exception handling policy so we don&#39;t have to re-invent the wheel.</para>
    </section>
  </section>

  <section id="logging">
    <title>Logging</title>

    <para>The logging package (<filename>java.util.logging</filename>) is
    bundled into J2SE 1.4 and above. An overview is available on line in the
    <ulink
    url="http://java.sun.com/j2se/1.4/docs/guide/util/logging/overview.html">Sun&#39;s
    SDK documentation</ulink>.</para>

    <para>Geotools uses one logger per class and is named after the class
    name.</para>

    <para>The logger should be declared in the class&#39;s static fields.</para>

    <example>
      <title>Logger declaration</title>

      <programlisting>// J2SE dependencies
import java.util.logging.Logger;

public class GMLDataSource {
    /**
     * The logger for the GML DataSource module.
     */
    private static final Logger LOGGER = Logger.getLogger(&#34;org.geotools.gml.GMLDataSource&#34;);

}</programlisting>
    </example>

    <para>Message can be conveniently logged using one of 7 predefined levels.
    The levels in descending order are:</para>

    <itemizedlist>
      <listitem>
        <para>severe (highest value)</para>
      </listitem>

      <listitem>
        <para>warning</para>
      </listitem>

      <listitem>
        <para>info</para>
      </listitem>

      <listitem>
        <para>config</para>
      </listitem>

      <listitem>
        <para>fine</para>
      </listitem>

      <listitem>
        <para>finer</para>
      </listitem>

      <listitem>
        <para>finest (lowest value)</para>
      </listitem>
    </itemizedlist>

    <para>By default, level SEVERE, WARNING and INFO are logged to the
    standard output. Level FINER is commonly used when entering, returning, or
    throwing an exception. A convenience method exists in Logger for each of
    those levels.</para>

    <example>
      <title>Logger use</title>

      <programlisting>LOGGER.info(&#34;There is a message of interest for ordinary user&#34;);</programlisting>
    </example>

    <para>There is three more convenience methods: <emphasis>entering</emphasis>,
    <emphasis>exiting</emphasis> and <emphasis>throwing</emphasis> when
    entering and exiting a method, or when we are about to terminate a method
    with an exception.</para>

    <example>
      <title>Entering/Existing Logger</title>

      <programlisting>public Object myMethod(String myArgument) {
    LOGGER.entering(&#34;MyClass&#34;, &#34;MyMethod&#34;, myArgument);
    // ... do some process here
    LOGGER.exiting(&#34;MyClass&#34;, &#34;MyMethod&#34;, myReturnValue);
    return myReturnValue;
}</programlisting>
    </example>

    <para>When logging a message, the logger will include many informations
    like date and time, source class and method names, current thread, etc. In
    order to avoid too many informations to be logged, it may be useful to
    merge consecutive logging into a single log statement.</para>

    <example>
      <title>Minimising Logger output</title>

      <programlisting>// Wasteful use of logging
LOGGER.finer(&#34;Value for A is &#34;+A);
LOGGER.finer(&#34;Value for B is &#34;+B);
LOGGER.finer(&#34;Value for C is &#34;+C);

// Good use of logging
LOGGER.finer(&#34;Computed values: A=&#34;+A+&#34;; B=&#34;+B+&#34;; C=&#34;+C);</programlisting>
    </example>

    <para>If the log message is expensive to construct, then consider
    enclosing it in a &#34;if&#34; statement.</para>

    <example>
      <title>Selective logging</title>

      <programlisting>if (LOGGER.isLoggable(Level.FINER)) {
    LOGGER.finer(&#34;Current state = &#34;+someVeryExpensiveMethodCall());
}</programlisting>
    </example>

    <para>To change the default logging setting, edit the following file:</para>

    <para><filename>$JAVA_HOME/jre/lib/logging.properties</filename></para>

    <para>Define the &#34;.level&#34; property to the minimal level of
    interest for you:</para>

    <para><command>.level= FINER</command></para>

    <para>Define the <filename>java.util.logging.ConsoleHandler.level</filename>
    property to the minimal level you want to see on the console. It may be
    different than the level logged to the XML file.</para>

    <example>
      <title></title>

      <programlisting># Limit the message that are printed on the console to FINE and above.
java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.encoding = Cp850</programlisting>
    </example>

    <para>Note the &#34;encoding&#34; property. For Windows user, it should be
    set to the value displayed by &#34;chcp&#34; on the command line. Linux
    and Unix users may ignore this line since Unix systems do a more
    intelligent work with page codes.</para>

    <para>Finally, a different logging level may be specified for each module.
    For example you may be interested in fairly detailed logging message from
    the GML module, but not from the CTS module. Then you could write:</para>

    <example>
      <title></title>

      <programlisting>org.geotools.gml.level = FINE
org.geotools.cts.level = INFO</programlisting>
    </example>

    <para>To do:</para>

    <itemizedlist>
      <listitem>
        <para>Merge Some of the examples into one.</para>
      </listitem>

      <listitem>
        <para>Separate out the Code examples from the Configuration examples.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="refactorit">
    <title>Refactoring</title>

    <para>Refactoring is the process of restructuring/renaming your code to
    ensure your design remains clean as your requirements and functionality
    change and grow with time.</para>

    <para>To ease refactoring you can use <ulink
    url="http://www.refactorit.com/">RefactorIt</ulink> which provides tools
    to:</para>

    <itemizedlist>
      <listitem>
        <para>research, probe and understand existing source code,</para>
      </listitem>

      <listitem>
        <para>move, organise and transform existing code,</para>
      </listitem>

      <listitem>
        <para>and provide code metrics.</para>
      </listitem>
    </itemizedlist>

    <para>More details can be found from the online help.</para>

    <para>RefactorIt is commercial, but provides free licences for Open Source
    projects like Geotools. See the RefactorIt web pages for details. It can
    be plugged into a variety of IDEs, including <filename>Netbeans</filename>.</para>

    <para>Installation inot <filename>netbeans</filename> fairly strait
    forward through <command>Tools -&#62; RefactorIt -&#62; Project Options</command>,
    although setting up soucepath and classpath is a difficult if some of the
    geotools files don&#39;t compile. You will need to either remove the
    offending files, get them to compile or remove them from RefactorIt&#39;s
    sourcepath.</para>
  </section>

  <section id="codeprofiling">
    <title>Code Profiling</title>

    <para>Code profilers are tools which analyse performance and memory of
    applications. Good free tools that we have used are a combination of
    <literal>hprof</literal> (provided with JDK) and <ulink
    url="http://www.hp.com/products1/unix/java/hpjmeter/">HPJMeter</ulink>
    (which analyzes profiling data from <literal>hprof</literal>).</para>

    <para>To invoke hprof, run java with the following options:
    <command>-Xrunhprof:cpu=samples,thread=n,depth=40,cutoff=0,format=a</command></para>

    <para>If you are running from Netbeans, select <command>Toos-&#62;Options-&#62;Debugging
    and Executing-&#62;Execution Types-&#62;(right
    click)-&#62;New-&#62;External Executor</command>. Rename the new executor
    <emphasis>HProf External Executor</emphasis> (or whatever you like). Still
    in the Options dialog box, open <command>HProf External
    Executor-&#62;Properties-&#62;External Process</command> and in arguments
    add at the beginning: <command>-Xrunhprof:cpu=samples,thread=n,depth=40,cutoff=0,format=a
    {assertEnabled}</command></para>

    <para><emphasis>hprof</emphasis> will be launched every time you select
    this kind of executor. Go to <command>HProf External
    Executor-&#62;Expert-&#62;Working Directory</command>. Set a working
    directory, Eg <filename>/home/&#60;username&#62;/tmp/hprof</filename>.
    <emphasis>Hprof</emphasis> dumps the resulting text file in this
    directory. This setting modifies the working directory of the java JVM.
    Make sure the working directory exists, otherwise the executor won&#39;t
    work.</para>

    <para>Close the <literal>options dialog</literal> and select the file you
    want to profile, select <command>(right click on file to
    profile)-&#62;Properties-&#62;Execution-&#62;Executor</command>. Set to
    the <literal>HProf External Profiler</literal>. Run. At the end of the run
    you&#39;ll find a <filename>java.hprof.txt</filename> file that can be
    opened with <emphasis>HPJMeter</emphasis>.</para>
  </section>

  <section id="testing">
    <title>Testing with junit</title>

    <para>As you code, you should write a unit test for each class to test the
    functionality and robustness of the class. This is made much easier by
    using <ulink url="http://www.junit.org">junit</ulink>. If you are testing
    <filename>org.geotools.module.HelloWorld</filename>, you should create a
    file <filename>geotools-src/module/tests/unit/org/geotools/module/HelloWorld.java</filename>
    similar to the following:</para>

    <example>
      <title>HelloWorldTest.java</title>

      <programlisting>package org.geotools.module;

import org.geotools.map.BoundingBox;

/**
 * Unit test for BoundingBox.
 *
 * @author Cameron Shorter
 */                                
public class HelloWorldTest extends TestCase {
    
    /** Test suite for this test case */
    private TestSuite suite = null;
    
    /** 
     * Constructor with test name.
     */
    public HelloWorldTest(String testName) {
        super(testName);
    }

    /** 
     * Main for test runner.
     */
    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }
    
    /** 
     * Required suite builder.
     * @return A test suite for this unit test.
     */
    public static Test suite() {
        TestSuite suite = new TestSuite(HelloWorldTest.class);
        return suite;
    }

    /** 
     * Initialize variables
     */
    protected void setUp() {
        // initialize variables
    }

    /** Test normal constuctors. */
    public void testHello(){
        assertTrue(&#34;HelloWorld should return null is true&#34;,HelloWorld.isNull());
    }
}</programlisting>
    </example>

    <para>Testing with junit is as easy as copying HelloWorldTest.java and
    adding more tests, and then executing it. If you want more information,
    look at the junit documentation or read one of the many <ulink
    url="http://www.junit.org">junit</ulink> tutorials.</para>

    <para>If your tests require test data, it should be stored in
    <filename>geotools2/geotools-src/&#60;module&#62;/tests/testdata/</filename>.
    Note that some old tests do not follow this naming convention.</para>
  </section>

  <section id="documentation">
    <title>Documentation</title>

    <section id="quickstart">
      <title>Quick Start</title>

      <para>The documentation section has become quite large and daunting, so
      I&#39;m writing this quick start documentation to make writing
      documentation as easy and fast as possible in the hope that more people
      will do it.</para>

      <orderedlist>
        <title>Simple steps for docbook editing</title>

        <listitem>
          <para>Download and install a Java Virtual Machine if you have not
          already done so.</para>
        </listitem>

        <listitem>
          <para>Download and install XXE, a WYSIWYM docbook editor.</para>
        </listitem>

        <listitem>
          <para>If you creating a new section, then copy an existing section
          and modify it. If you are updating an existing section - well, that
          is even easier.</para>

          <example>
            <title>Edit a docbook section file</title>

            <programlisting>cp doclicense.sgml yoursection.sgml
xxe yoursection.sgml</programlisting>
          </example>
        </listitem>

        <listitem>
          <figure>
            <title>Editing with XXE</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/developersguide/xxescreenshot.png" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>XXE is similar to any GUI editor. You type in the main panel
          and most of the list/table/paragraph/section/figure formatting
          options are selectable from the toolbar. Remember that simple
          docbook is structured XML. You will often need to select an XML node
          so you can specify whether the next paragraph should be part of this
          section or a new section. Select XML nodes with arrow icons:
          <inlinemediaobject><imageobject><imagedata
          fileref="images/developersguide/xxeselecticons.png" /></imageobject></inlinemediaobject></para>
        </listitem>

        <listitem>
          <para>To publish your document after editing, either tell the main
          document author and get them to do it, or read the rest of the
          documentation section.</para>
        </listitem>
      </orderedlist>
    </section>

    <section id="writingguidelines">
      <title>Writing Guidelines</title>

      <para>todo: Fill this out. Include:</para>

      <itemizedlist>
        <listitem>
          <para>Each section tag should have an unique id tag associated with
          it. This id is used for references and filenames.</para>
        </listitem>

        <listitem>
          <para>Documentation should be concise and preferably should refer to
          documentation elsewhere on the web rather than reproduce it in this
          guide.</para>
        </listitem>

        <listitem>
          <para>Sections should be broken in the following manner:</para>

          <orderedlist>
            <listitem>
              <para><emphasis>Section: Process</emphasis></para>

              <para>Line or two describing the process</para>

              <orderedlist>
                <listitem>
                  <para><emphasis>Section: Tool1</emphasis></para>

                  <para>Description of tool, how to configure and use it.
                  Reference tool&#39;s documentation rather than reproducing
                  it here.</para>
                </listitem>

                <listitem>
                  <para><emphasis>Section: Tool2</emphasis></para>
                </listitem>

                <listitem>
                  <para><emphasis>Section: References</emphasis></para>

                  <para>References to further reading.</para>
                </listitem>
              </orderedlist>
            </listitem>
          </orderedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section id="whydocbook">
      <title>Why Docbook?</title>

      <para>Documentation for geotools is written using <ulink
      url="http://www.oasis-open.org/committees/docbook/xml/simple/">Simplified
      Docbook</ulink> format. Simplified Docbook is a subset of Docbook XML, a
      versatile format used by the <ulink url="http://www.linuxdoc.org">Linux
      Documentation Project</ulink> (among others).</para>

      <para>Docbook can be easily converted into numerous output formats, like
      HTML, PDF, etc.</para>

      <para>Using Docbook ensures documentation content is kept separate from
      presentation so content can written once and published in numerous
      formats and styles.</para>

      <para>There are a few GUI editors for docbook now, with more editors
      promising to support docbook in the future.</para>

      <para>According to <ulink
      url="http://www.tldp.org/HOWTO/Software-Release-Practice-HOWTO/documentation.html#AEN449">The
      Software Release&#39;s Howto</ulink>, docbook is the open source format
      of the future, and most of the high profile open source projects have
      moved or are moving to docbook as their coding standards. So we are
      saving ourselves pain in the future by embracing Docbook now.</para>

      <para>In the geotools build process, documentation is converted from
      Docbook format to HTML using maven.</para>

      <para>For information about using javadoc to comment your code, refer to
      <xref linkend="codingstandards" />.</para>
    </section>

    <section id="modulardocumentation">
      <title>Modular documentation</title>

      <para>Modular DocBook means content is broken up into smaller file
      modules that are recombined for publication. The advantages of modular
      documentation include:</para>

      <itemizedlist>
        <listitem>
          <para>Reusable content units.</para>
        </listitem>

        <listitem>
          <para>Smaller file units to load into an editing program.</para>
        </listitem>

        <listitem>
          <para>Distributed authoring.</para>
        </listitem>

        <listitem>
          <para>Finer grain version control.</para>
        </listitem>
      </itemizedlist>

      <para>Geotools <emphasis>design</emphasis> documentation uses a main
      document called <filename>design.xml</filename> which uses
      <literal>&#60;xi:include&#62;</literal> tags to include sections from
      other files.</para>

      <example>
        <title>Including sections into a master document</title>

        <variablelist>
          <varlistentry>
            <term><filename>design.xml</filename></term>

            <listitem>
              <programlisting>&#60;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&#62;
&#60;!DOCTYPE article PUBLIC &#34;-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN&#34;
&#34;http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd&#34;&#62;
&#60;article
id=&#34;index&#34;&#62;
  &#60;articleinfo&#62;
    &#60;title&#62;Geotools2 Software Design Description&#60;/title&#62;
  &#60;/articleinfo&#62;

  &#60;section id=&#34;scope&#34;&#62;
    &#60;title&#62;Scope&#60;/title&#62;

    &#60;xi:include xmlns:xi=&#34;http://www.w3.org/2001/XInclude&#34;
    href=&#34;doclicense.sgml&#34;/&#62;
  &#60;/section&#62;
&#60;/article&#62;</programlisting>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><filename>doclicense.sgml</filename></term>

            <listitem>
              <programlisting>&#60;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&#62;
&#60;!DOCTYPE section PUBLIC &#34;-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN&#34;
&#34;http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd&#34;&#62;
&#60;section id=&#34;licence&#34;&#62;
  &#60;title&#62;License.&#60;/title&#62;

  &#60;para&#62;Copyright (c) 2002 Cameron Shorter. Permission is granted to copy,
  distribute and/or modify this document under the terms of the &#60;ulink
  url=&#34;http://www.fsf.org/copyleft/fdl.html&#34;&#62;GNU Free Documentation License&#60;/ulink&#62;,
  Version 1.1 or any later version published by the Free Software Foundation;
  with the Invariant Sections being with no Invariant Sections, with the
  Front-Cover Texts being no Front-Cover Texts, and with the Back-Cover Texts
  being no Back-Cover Texts.&#60;/para&#62;
&#60;/section&#62;</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </example>

      <para>If you want to document a new module, you need to write a new
      <filename>xxxmodule.sgml</filename> section file, and then add an
      <literal>&#60;xi:include&#62;</literal> tag into <filename>design.xml</filename>.</para>

      <para>Notice in the above example that <emphasis>&#60;section&#62;</emphasis>
      tags contain an <emphasis>id</emphasis> attribute. This means the URL of
      sections will be human readable, something like <filename>http://geotools.org/gt2docs/design.html#licence</filename>
      instead of <filename>http://geotools.org/gt2docs/design.html#id2754172</filename>.</para>
    </section>

    <section id="docbookdirectorystructure">
      <title>Location of docbook files and images</title>

      <para>Docbook files should be stored in:</para>

      <itemizedlist>
        <listitem>
          <para><filename>geotools/geotools-src/docs/sdocbook/&#60;name&#62;.sgml</filename>
          if the section is generic and not associated with a particular
          module.</para>
        </listitem>

        <listitem>
          <para><filename>geotools/geotools-src/&#60;module&#62;/sdocbook/&#60;name&#62;.sgml</filename>
          if the section describes a module.</para>
        </listitem>
      </itemizedlist>

      <para>If your section uses images, then they should be stored in:</para>

      <itemizedlist>
        <listitem>
          <para><filename>geotools/geotools-src/docs/sdocbook/images/design/&#60;name&#62;.png</filename>
          if the section is generic and not associated with a particular
          module.</para>
        </listitem>

        <listitem>
          <para><filename>geotools/geotools-src/&#60;module&#62;/sdocbook/images/&#60;module&#62;/&#60;name&#62;.sgml</filename>
          if the section describes a module.</para>
        </listitem>
      </itemizedlist>

      <para>Note images should not be stored in <filename>&#60;module&#62;/sdocbook/images/*.png</filename>.
      This is because images from all modules will be copied into one target
      directory and images with the same name will overwrite each other.</para>

      <para>If you create a new images directory, then you also need to update
      the <filename>geotools-src/docs/gtpublish</filename> script to include
      the location of your images directory. Otherwise your images will not be
      copied when <filename>gtpublish</filename> is run.</para>

      <variablelist>
        <varlistentry>
          <term><filename>lines of gtpublish to update when adding a new
          images directory</filename></term>

          <listitem>
            <programlisting>imageSource=&#34;sdocbook/images \
    ../defaultcore/sdocbook/images \
    ../sldstyling/sdocbook/images&#34;
</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="publishingdocbook">
      <title>Publishing docbook files</title>

      <section id="publishingintroduction">
        <title>Publishing introduction</title>

        <para>The problem with <literal>&#60;xi:include&#62;</literal> tags,
        the master document, <filename>design.xml</filename>, is not valid
        XML. Consequently, many XSLT engines do not work on the master
        document.</para>
      </section>

      <section id="publishmasterdocs">
        <title>Publishing master documents</title>

        <para><filename>gtpublish</filename> can be used to publish all
        docbook files, including those files which contain <literal>&#60;xi:include&#62;</literal>
        tags. The downside is that it is a unix shell script which depends on
        <filename>xsltproc</filename>. If you are using linux then make sure
        you have <filename>xsltproc</filename> installed then run the
        following:</para>

        <example>
          <title>Use of gtpulish</title>

          <literallayout><computeroutput>$ cd ~/geotools/geotools-src/docs
$ ./gtpubish
$ netscape ~/geotools/geotools-src/docs/www/design.html</computeroutput></literallayout>
        </example>

        <para>In windows you can install <ulink url="http://www.cygwin.com/">cygwin</ulink>,
        a unix environment for windows, and run <filename>gtpublish</filename>
        within cygwin. See this link on <ulink
        url="http://www.sagehill.net/xml/docbookxsl/ToolsSetup.html#InstallXsltproc">installing
        xsltproc</ulink>.</para>

        <para>Note: If your images are not being copied into the target
        directory, then you probably have forgotten to add the images&#39;
        directory into the <filename>gtpublish</filename> script.</para>
      </section>

      <section id="publishingwithant">
        <title>Publishing using ant</title>

        <para><filename>ant</filename> works all platforms and is probably
        already installed on all developers computers. ant will process all
        docbook files but will not expand <literal>&#60;xi:include&#62;</literal>
        tags.</para>

        <example>
          <title>Use of ant for publishing doclicense.smgl</title>

          <literallayout><computeroutput>$ cd ~/geotools/geotools-src/docs
$ ant
$ netscape ~/geotools/geotools-src/docs/www/doclicense.html</computeroutput></literallayout>
        </example>

        <para>In version 1.5, ant has a bug which prevents it from publishing
        more than one docbook document at a time. The workaround is to run
        <filename>ant</filename> a number of times. Earlier versions of
        <filename>ant</filename> have even more bugs and less functionality.</para>
      </section>

      <section id="publishusingmaven">
        <title>Publishing using maven</title>

        <para>Maven allows uses to process docbook to (arnika/velocity?) and
        then to html. However at the time of writing, this functionality was
        still very bug ridden. Hopefully it will improve soon.</para>
      </section>
    </section>

    <section id="docbookeditors">
      <title>Docbook Editors</title>

      <para>You can edit docbook with the following free tools:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="http://www.xmlmind.com/xmleditor/">XXE</ulink> is
          a java based, <emphasis>What You See Is What You Mean (WYSIWYM)</emphasis>
          editor. It provides a slightly clunky but workable GUI interface for
          editing Docbook documents. It is well worth trying.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.netbeans.org/">Netbeans</ulink>: Simple
          Docbook is XML, so XML editors work well. Netbeans has a nice XML
          plugin which I use.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.vim.org/">vim</ulink> and <ulink
          url="http://www.gnu.org/software/emacs/emacs.html">emacs</ulink>, or
          any text editor can be used.</para>
        </listitem>

        <listitem>
          <para>There are a number of WYSIWYM editors developing Docbook
          export/import functionality at the time of writing. Of note, <ulink
          url="http://www.openoffice.org">Open Office</ulink> and <ulink
          url="www.lyx.org">Lyx</ulink> look promising.</para>
        </listitem>

        <listitem>
          <para>Viewing Docbook: Tomas has written a useful web page for
          viewing Docbook pages at <ulink url="???">http://www.cartesia.org/modules.php?op=modload&#38;name=NS-Docbook&#38;file=index</ulink>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="docbookreferences">
      <title>Docbook References</title>

      <para>There are a few references worth knowing:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="http://www.tldp.org/LDP/LDP-Author-Guide/">The
          Linux Documentation Project Author Guide</ulink> provides an
          introduction to Docbook and some of the key tags. Don&#39;t worry
          about the sections on tools for converting docbook as geotools uses
          the maven build process instead. Note that the geotools uses
          Simplified Docbook which is XML based. There are various versions of
          Docbook which makes things confusing.</para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.oasis-open.org/committees/docbook/xml/simple/sdocbook/elements.html">The
          Simplified Docbook Summary</ulink> provides a list of all the XML
          tags you can use, and the dependency between these tags.</para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.docbook.org/tdg/simple/en/html/sdocbook.html">Simplified
          Docbook, the Definitive Guide</ulink> provides comprehensive
          documentation about all the Simplified Docbook tags.</para>
        </listitem>

        <listitem>
          <para><ulink url="Using the Docbook XSL Stylesheets">Using the
          Docbook XSL Stylesheets</ulink>, in particular, the section on
          <ulink url="http://www.sagehill.net/xml/docbookxsl/ModularDoc.html">writing
          modular docbook files</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://xincluder.sourceforge.net/">Xincluder</ulink>
          is a java open source project for processing <emphasis>xinlcude</emphasis>
          tags, which might be able to be used to by maven to publish modular
          docbook documents.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>