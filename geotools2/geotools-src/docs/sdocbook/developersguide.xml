<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN"
"http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd">
<!-- Use the following if you want to use ant to style this file when offline
"file:../../extbin/gtbuild/xxe/dtd/sdocbook/sdocbook.dtd"--><article
id="index">
  <articleinfo>
    <title>Geotools2 Developer Guide</title>

    <authorgroup>
      <author>
        <firstname>Cameron</firstname>

        <surname>Shorter</surname>
      </author>

      <author>
        <firstname>James</firstname>

        <surname>Macgill</surname>
      </author>

      <author>
        <firstname>Martin</firstname>

        <surname>Desruisseaux</surname>
      </author>

      <editor>
        <firstname>Cameron</firstname>

        <surname>Shorter</surname>
      </editor>
    </authorgroup>

    <date>$Date: 2002/12/18 20:50:10 $</date>

    <edition>$Id: developersguide.sgml,v 1.15 2002/11/23 03:51:29 camerons Exp
    $</edition>

    <abstract>
      <para>Guide to aid <filename>geotools2</filename> development.</para>
    </abstract>
  </articleinfo>

  <section>
    <title id="introduction">Introduction</title>

    <section>
      <title id="identification">Identification.</title>

      <para>This document aims to help new <ulink url="http://geotools.org">Geotools2</ulink>
      developers get up to speed and track practices of existing developers in
      order to keep the project consistent.</para>
    </section>

    <!--xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="systemoverview.sgml"/-->

    <!--xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="license.sgml"/-->
  </section>

  <section id="development">
    <title>Development</title>

    <section>
      <title id="requirements">Requirements</title>

      <para>Before developing geotools2, you should download and install the
      following:</para>

      <itemizedlist>
        <listitem>
          <para>Java Software Development Kit version 1.4 or later</para>
        </listitem>

        <listitem>
          <para>ant version 1.5beta1 or later</para>
        </listitem>

        <listitem>
          <para>maven</para>
        </listitem>

        <listitem>
          <para>Java Advance Imaging Libraries (JAI) are used by geotools when
          rendering. The libraries should be installed into your JRE
          libraries. See the <ulink
          url="http://java.sun.com/products/java-media/jai/">Java Advanced
          Imaging Libraries pages</ulink> for details.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title id="java">Java</title>

      <para>Some geotools modules depend on classes in Java Development Kit
      1.4 or greater. Even when compiling with version 1.4, you will need to
      specifically tell the compiler that you are using version 1.4, otherwise
      the compiler will expect new java keywords are class names instead. If
      you compile from the command line, you should use the following:</para>

      <para><command>javac -source 1.4 [other options] [files to compile]</command></para>

      <para>Make sure you update <link linkend="netbeanscompileoptions">compile
      options in Netbeans</link> if you use Netbeans.</para>

      <para>If you use <filename>ant</filename> for compiling, or building
      javadocs or similar, then you will need to include something like:</para>

      <para><command>&#60;javadoc source=&#34;1.4&#34;&#62;...</command></para>

      <para>So far, I have only tested Geotools with Sun&#39;s Software
      Development Kit (SDK). If you try another java compiler then let me know
      how successful you are and we can include it here.</para>
    </section>

    <section id="templates">
      <title>Template File</title>

      <para>Below is a sample template file which we will explain upon in the
      following sections:</para>

      <example>
        <title>Sample Geotools File</title>

        <programlisting>/*
 * Geotools - OpenSource mapping toolkit
 * (C) 2002, Centre for Computational Geography
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation;
 * version 2.1 of the License.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

package org.geotools.&#60;class&#62;; 

import dir.dir.SomeClass1; 
import dir.dir.SomeClass2; 

/**
 * Description of this class.
 *
 * @version <emphasis>$Id: developersguide.xml,v 1.4 2002/12/18 20:50:10 camerons Exp $</emphasis>
 * @author Your Name
 */
public class ThisClass { 
    /**
     * Description of internalVar.
     */ 
    private SomeClass1 internalVar;

    /**
     * Description of method.
     * @param a_param Description of the parameter.
     */

    void aMethod( SomeClass1 aParam) 
    {
        internalVar=aParam; 
    }
}</programlisting>
      </example>

      <para>Key things to note in this example:</para>

      <orderedlist>
        <listitem>
          <para>The License. Each class should contain a reference to it.</para>
        </listitem>

        <listitem>
          <para>Javadoc comments.</para>
        </listitem>

        <listitem>
          <para>The CVS tag <emphasis>$Id</emphasis> <emphasis>:$</emphasis>
          When you commit your file into CVS, this will be expanded to
          something like:</para>

          <para>$Id: developersguide.sgml,v 1.2 2002/10/23 22:28:54 camerons
          Exp $</para>
        </listitem>
      </orderedlist>

      <para>todo: Need to decide who owns the license.</para>
    </section>

    <section id="CodingStandards">
      <title>Coding Standards</title>

      <section>
        <title>to do</title>

        <itemizedlist>
          <listitem>
            <para>Using <ulink
            url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Sun&#39;s
            coding standard</ulink>, need to note any exceptions to it.</para>
          </listitem>

          <listitem>
            <para>Note the auto checking of coding standards.</para>
          </listitem>

          <listitem>
            <para>Javadocs</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title id="directorynames">Directory Naming Conventions</title>

        <para>Directory names shall be all lower case with no spaces. Some
        versions of windows do not distinguish between upper and lower case,
        and in unix, writing spaces in filenames is painful.</para>
      </section>

      <section>
        <title>Class Naming Conventions</title>

        <figure>
          <title>Interface and Class naming convensions</title>

          <mediaobject>
            <imageobject>
              <imagedata
              fileref="images/developersguide/NamingConvensions.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Geotools provides interfaces in the <filename>geotools-src/core</filename>
        and classes which instantiate these interfaces which usually reside in
        <filename>geotools-src/defaultcore</filename>. By convention, the
        interface should be called <filename>XXX.java</filename> class should
        be called <filename>XXXImpl.java</filename>.</para>
      </section>

      <section>
        <title id="moduledirstructure">Module Directory Structure</title>

        <para>Geotools derived its directory structure from <ulink
        url="http://www.netbeans.org">Netbeans</ulink>.</para>

        <para>A module may contain the following directories and files:</para>

        <itemizedlist>
          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/src/org/geotools/&#60;dir&#62;/*.java</filename></para>

            <para>This is where source files are kept. <filename>&#60;dir&#62;</filename>
            is usually the same or derives it&#39;s name from
            &#60;module&#62;.</para>
          </listitem>

          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/tests/unit/org/geotools/&#60;module&#62;/*.java</filename></para>

            <para>This directory contains unit tests.</para>
          </listitem>

          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/tests/testdata/*</filename></para>

            <para>This directory contains data to be used by tests.</para>
          </listitem>

          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/sdocbook/*.sgml</filename></para>

            <para>This directory contains documentation about the module in
            Simple Docbook format.</para>

            <para>Documentation will usually be part of an existing geotools
            module. For general documentation (like the Developer&#39;s
            Guide), a dedicated module may be created which does not contain
            any code.</para>

            <figure>
              <title>Typical Documentation Directory Structure</title>

              <mediaobject>
                <imageobject>
                  <imagedata format="PNG"
                  fileref="images/developersguide/dir_structure.png" />
                </imageobject>

                <textobject>
                  <phrase>Typical Documentation Directory Structure</phrase>
                </textobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/sdocbook/images/&#60;modules&#62;/*.sgml</filename></para>

            <para>This directory contains images for the documentation.</para>

            <para>Documentation from all modules are often built into one
            target directory. Therefore, to ensure module&#39;s images do not
            overwrite each other, images are stored in a directory below the
            images directory, in<filename>images/&#60;module_name&#62;/*.png</filename>.</para>
          </listitem>

          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/build-mavin.xml</filename></para>

            <para><filename>build-mavin.xml</filename> will eventually become
            <filename>build.xml</filename>. This file provides tools for
            building the module using <filename>ant</filename> and
            <filename>maven</filename>.</para>
          </listitem>

          <listitem>
            <para><filename>geotools2/geotools-src/&#60;module&#62;/project.xml</filename></para>

            <para><filename>project.xml</filename> provides metadata about the
            module for <filename>maven</filename>.</para>
          </listitem>

          <listitem>
            <para><filename>geotools2/extbin/&#60;module&#62;/*.jar</filename></para>

            <para>This contains the libraries required to compile
            &#60;module&#62;.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="logging">
      <title>Logging</title>

      <para>to do: Need to change granularity of logger to package level
      instead of module level.</para>

      <para>The logging package (<filename>java.util.logging</filename>) is
      bundled into J2SE 1.4 and above. An overview is available on line in the
      <ulink
      url="http://java.sun.com/j2se/1.4/docs/guide/util/logging/overview.html">Sun&#39;s
      SDK documentation</ulink>.</para>

      <para>Geotools uses one logger per module. Logger is named using the
      <filename>org.geotools</filename> prefix followed by the module name.
      For example the logger name for the GML Data Source module is
      <filename>org.geotools.gml</filename>. The logger name for the
      Coordinate Transformation Services module is <filename>org.geotools.cts</filename>.</para>

      <para>The logger should be declared in the class&#39;s static fields.</para>

      <example>
        <title>Logger declaration</title>

        <programlisting>// J2SE dependencies
import java.util.logging.Logger;

public class GMLDataSource {
    /**
     * The logger for the GML DataSource module.
     */
    private static final Logger LOGGER = Logger.getLogger(&#34;org.geotools.gml&#34;);

}</programlisting>
      </example>

      <para>Message can be conveniently logged using one of 7 predefined
      levels. The levels in descending order are:</para>

      <itemizedlist>
        <listitem>
          <para>severe (highest value)</para>
        </listitem>

        <listitem>
          <para>warning</para>
        </listitem>

        <listitem>
          <para>info</para>
        </listitem>

        <listitem>
          <para>config</para>
        </listitem>

        <listitem>
          <para>fine</para>
        </listitem>

        <listitem>
          <para>finer</para>
        </listitem>

        <listitem>
          <para>finest (lowest value)</para>
        </listitem>
      </itemizedlist>

      <para>By default, level SEVERE, WARNING and INFO are logged to the
      standard output. Level FINER is commonly used when entering, returning,
      or throwing an exception. A convenience method exists in Logger for each
      of those levels.</para>

      <example>
        <title>Logger use</title>

        <programlisting>LOGGER.info(&#34;There is a message of interest for ordinary user&#34;);</programlisting>
      </example>

      <para>There is three more convenience methods: <emphasis>entering</emphasis>,
      <emphasis>exiting</emphasis> and <emphasis>throwing</emphasis> when
      entering and exiting a method, or when we are about to terminate a
      method with an exception.</para>

      <example>
        <title>Entering/Existing Logger</title>

        <programlisting>public Object myMethod(String myArgument) {
    LOGGER.entering(&#34;MyClass&#34;, &#34;MyMethod&#34;, myArgument);
    // ... do some process here
    LOGGER.exiting(&#34;MyClass&#34;, &#34;MyMethod&#34;, myReturnValue);
    return myReturnValue;
}</programlisting>
      </example>

      <para>When logging a message, the logger will include many informations
      like date and time, source class and method names, current thread, etc.
      In order to avoid too many informations to be logged, it may be useful
      to merge consecutive logging into a single log statement.</para>

      <example>
        <title>Minimising Logger output</title>

        <programlisting>// Wastfull use of logging
LOGGER.finer(&#34;Value for A is &#34;+A);
LOGGER.finer(&#34;Value for B is &#34;+B);
LOGGER.finer(&#34;Value for C is &#34;+C);

// Good use of logging
LOGGER.finer(&#34;Computed values: A=&#34;+A+&#34;; B=&#34;+B+&#34;; C=&#34;+C);</programlisting>
      </example>

      <para>If the log message is expensive to construct, then consider
      enclosing it in a &#34;if&#34; statement.</para>

      <example>
        <title>Selective logging</title>

        <programlisting>if (LOGGER.isLoggable(Level.FINER)) {
    LOGGER.finer(&#34;Current state = &#34;+someVeryExpensiveMethodCall());
}</programlisting>
      </example>

      <para>To change the default logging setting, edit the following file:</para>

      <para><filename>$JAVA_HOME/jre/lib/logging.properties</filename></para>

      <para>Define the &#34;.level&#34; property to the minimal level of
      interest for you:</para>

      <para><command>.level= FINER</command></para>

      <para>Define the <filename>java.util.logging.ConsoleHandler.level</filename>
      property to the minimal level you want to see on the console. It may be
      different than the level logged to the XML file.</para>

      <example>
        <title></title>

        <programlisting># Limit the message that are printed on the console to FINE and above.
java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.encoding = Cp850</programlisting>
      </example>

      <para>Note the &#34;encoding&#34; property. For Windows user, it should
      be set to the value displayed by &#34;chcp&#34; on the command line.
      Linux and Unix users may ignore this line since Unix systems do a more
      intelligent work with page codes.</para>

      <para>Finally, a different logging level may be specified for each
      module. For example you may be interested in fairly detailed logging
      message from the GML module, but not from the CTS module. Then you could
      write:</para>

      <example>
        <title></title>

        <programlisting>org.geotools.gml.level = FINE
org.geotools.cts.level = INFO</programlisting>
      </example>

      <para>To do:</para>

      <itemizedlist>
        <listitem>
          <para>Merge Some of the examples into one.</para>
        </listitem>

        <listitem>
          <para>Separate out the Code examples from the Configuration
          examples.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="building">
      <title>Building</title>

      <para>At the time of writing, geotools2 is moving toward using maven for
      building. However, for the moment, there is an ant build script in each
      module directory. This is explained in <filename>geotools2/geotools-src/gtbuild/www/howto-build.html</filename>.</para>

      <para>I&#39;ll fill this section in a bit more when the maven process is
      setup fully.</para>

      <para>To do:</para>

      <itemizedlist>
        <listitem>
          <para>using ant</para>
        </listitem>

        <listitem>
          <para>insert the &#34;howto-build.html&#34; doc into here</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Using Maven</title>

        <para>First off, what is maven? Maven is a &#34;Java project
        management and project comprehension tool&#34;, or in other words, yet
        another build tool.</para>

        <para>It is built on top of ant and a number of other open source
        utilities and brings them together in a in an easy to use tool.</para>

        <para>They key part of maven is the use of project files, you should
        now be able to find a project.xml file in every active module (note
        for example that awtRenderer does not have one, this is because it is
        very out of date and not currently being developed)</para>

        <para>The project file tells you the name of the module, who maintains
        it, who develops it, what version it has reached and what it depends
        on. Note that as all the modules have some things in common the module
        project files actually extend one which can be found in the geotools2
        root directory.</para>

        <para>The most important part of the project file is the dependencies
        section as maven uses this to determine what order to build the
        modules in and what support jars to download when needed. (If we move
        over to maven exclusively we will no longer need the extbin folder)</para>

        <section>
          <title>Getting Maven</title>

          <para>You will need Maven 1.0 beta 7 installed in order to use the
          maven build process on your machine, you can download it from:
          <ulink url="http://www.ibiblio.org/maven/maven/distributions/">http://www.ibiblio.org/maven/maven/distributions/</ulink></para>
        </section>

        <section>
          <title>Installing Maven</title>

          <para>Unpack the archive you downloaded to a convenient location on
          your machine (c:\program files is good for windoze boxes)</para>

          <para>Set an environment variable called MAVEN_HOME to point to this
          location (e.g. c:\program files\maven-1.0-beta-7)</para>

          <para>Add MAVEN_HOME\bin to your systems PATH environment variable.</para>

          <para>Maven can require a lot of memory when building GT2, by
          default it has a limit of 128mb so this needs to be raised, to do
          this edit the maven.bat (Windows) or maven (*nix) file in the
          MAVEN_HOME/bin folder.</para>

          <para>Look for the : <command>SET MAVEN_OPTS=-Xmx128m</command></para>

          <para>And change it to: <command>SET MAVEN_OPTS=-Xmx256m</command></para>

          <para>You must also have the JAI extention from sun installed as it
          is required by a number of modules.</para>
        </section>

        <section>
          <title>Using Maven to build ALL modules</title>

          <para>Most of the GT2 modules depend on other GT2 modules, so the
          first thing you will want to do is perform a full build so that you
          have a jar from each module installed in your local repository.</para>

          <para>Move to the geotools2 directory (the one that contains
          geotools-src and spike) <command>type &#39;maven&#39;</command></para>

          <para>All being well maven should startup and proceed to build all
          the modules in the right order, at the end of this process it will
          display a list of all the modules which were built and installed
          correctly.</para>

          <para><emphasis>NOTE:</emphasis> The first build can take a very
          long time as maven actually downloads a lot of the files it needs to
          run itself before starting on the main build, please be patient,
          subsequent builds do not take as long.</para>
        </section>

        <section>
          <title>The Maven local repository</title>

          <para>On your machine you will find a directory in MAVEN_HOME called
          repository, this is where maven stores all downloaded jars and
          installed projects.</para>

          <para>You should see that any third party jars, such as JTS, will
          have been installed in this repository, you should also see that all
          successful module builds have had their jars installed here too
          (e.g. core, defaultcore...)</para>
        </section>

        <section>
          <title>Building an individual module</title>

          <para>Provided you have done at least one complete build you should
          be able to build individual modules.</para>

          <para>Change to the modules home directory (e.g.
          geotools-src\defaultcore) <command> Type &#39;maven&#39;</command></para>

          <para>It should do a complete build, note that if you have not done
          a full build yet then the build may fail because it can&#39;t find
          the jar for a module it depends on. An error caused by not having
          another GT2 module installed can be a little missleading, for
          example the error may look something like: Error: unable to download
          core-0.1.jar. This is beacuse Maven failed to find core-0.1.jar in
          the local repository (where a full build should have put it) so it
          tried to download and fails. If you see an error like that either do
          a full build or change into the module which is missing (core in
          this case) and type</para>

          <para><command>maven jar:install</command></para>

          <para>This should build and install that individual module, all
          being well you should then be able to go back to the module you were
          trying to build and try again.</para>
        </section>

        <section>
          <title>Doing things other than building</title>

          <para>In any individual module home you can type maven -g to see a
          full list of goals that can be run for that module.</para>

          <para>Handy examples include... maven site (generates a web site in
          the target\docs folder which provides a LOT of information about the
          module) maven javadoc (generates the javadoc for the module, look in
          target for output) maven test (runs the tests, look in
          target/test-reports for output) maven jar:install (installs the
          module into the Maven repository for use by other modules)</para>
        </section>

        <section>
          <title>Project File structure</title>

          <para>Maven uses a number of files to work out what to do, the most
          important as mentioned above are the project.xml files, there are
          however a few others, the layout is as follows:</para>

          <para>geotools2\project.xml - the parent template project file which
          the module files extend geotools2\maven.xml - a control file which
          marchels the building of ALL modules and will soon generate a full
          website geotools2\geotools-src\module\project.xml - the specific
          project file for a given module
          geotools2\geotools-src\module\build.properties - some control
          properties that will eventually be inherited from a a parent, but
          not yet. geotools2\geotools-src\module\target - folder generated
          during builds that contains all output (classes, jars and reports)
          geotools2\geotools-src\module\xdocs - contains files such as logos
          or additional web pages that go into the web site</para>
        </section>

        <section>
          <title>Remote File Structure:</title>

          <para>There is a repository of jars required by geotools2 stored on
          the sourceforge site, you can browse it online at: <ulink
          url="http://www.geotools.org/gt2modules/extbin">http://www.geotools.org/gt2modules/extbin</ulink></para>

          <para>If a module you are developing needs a third party jar to
          operate then this is the place to put it, the naming convention is:
          projectname/jars/jarname-version.jar</para>

          <para>You can find the remote repository on the shell sever
          (shell.sourceforge.net) at
          /home/groups/g/ge/geotools/htdocs/gt2modules/extbin it has group
          permissions set so you should be able to modify it if you have
          developer rights. Be sure to set the appropriate permissions so all
          can download it, and so other developers can modify it.</para>

          <para>So, for example, we use JTS verion 1.0 in a number of modules,
          you can find this jar online at:<ulink
          url="http://www.geotools.org/gt2modules/extbin/JTS/jars/JTS-1.0.jar">http://www.geotools.org/gt2modules/extbin/JTS/jars/JTS-1.0.jar</ulink></para>

          <para>Which is stored on the server in
          /home/groups/g/ge/geotools/htdocs/gt2modules/extbin/JTS/jars/JTS-1.0.jar</para>

          <para>Any module which needs to depend on JTS will then have the
          following tag in its project.xml file:</para>

          <example>
            <title>Sample project.xml dependany entry</title>

            <programlisting>&#60;dependency&#62;
  &#60;id&#62;JTS&#60;/id&#62;
  &#60;version&#62;1.0&#60;/version&#62;
&#60;/dependency&#62;</programlisting>
          </example>
        </section>

        <section>
          <title>Testing with Maven</title>

          <para>Maven complicates things on the logging front, as it does a
          lot of redirection. By default the logs from testing end up in
          /target/test-reports of each module sub-directory. There should be
          xml and txt files for the results of each test. Be sure to check
          both, as one of the wrinkles of maven makes it so the output
          isn&#39;t always exactly the same. To have maven display the logging
          as it tests instead of just writing to files set the
          maven.junit.usefile property to false. To set a property, you can
          either pass it in from the command line with the -D flag (maven
          -Dmaven.junit.usefile=false) or set it in the build.properties file
          (just add the line &#39;maven.junit.usefile=false&#39;). Another
          helpful testing hint: in order to run only one test, call &#39;maven
          test:single&#39; and set the testcase property to the full name
          (org.geotools.package.ClassTest) of the test to run. If you are
          having problems with logging output levels be sure to read section
          2.5 on logging.</para>
        </section>
      </section>

      <section>
        <title>Using ant</title>

        <para>Compiling with ant is being replaced with the maven build
        system, so this section will eventually be deleted.</para>

        <para>Each module should compile by itself. You should be able to do
        the following:</para>

        <example>
          <title>Building modules using ant</title>

          <programlisting>cd geotools2/geotools-src/&#60;module&#62;
ant</programlisting>
        </example>

        <para>You can build all modules from the
        geotools2/geotools-src/gtbuild directory:</para>

        <example>
          <title>Building all modules using ant</title>

          <programlisting>cd geotools2/geotools-src/gtbuild
ant</programlisting>
        </example>
      </section>
    </section>

    <section id="testing">
      <title>Testing</title>

      <para>To do:</para>

      <itemizedlist>
        <listitem>
          <para>Explain use of junit. Might be a link to another web site.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title id="inlinetasktracking">Inline Task Tracking</title>

      <para>You can place <computeroutput>@task</computeroutput> markers in
      the javadoc sections to track areas for rework. During the maven build
      process, the tags are extracted to build a report page. Example output
      can be viewed at: <ulink
      url="http://modules.geotools.org/core/task_list.html">http://modules.geotools.org/core/task_list.html</ulink>.
      Inline Task Tracking is particularly useful during development. After
      code has been released, bugs should be tracked using the Bug Tracker.</para>

      <para>The following tags are available:</para>

      <itemizedlist>
        <listitem>
          <para>TODO:</para>
        </listitem>

        <listitem>
          <para>REVISIT:</para>
        </listitem>

        <listitem>
          <para>HACK:</para>
        </listitem>
      </itemizedlist>

      <example>
        <title>Inline task tracking within a method</title>

        <programlisting>/**
 * This is an example method.
 * @param i This explains the variable.
 * @task TODO: This method should have some code.
 */
void example(int i) {
}</programlisting>
      </example>
    </section>

    <section id="documentation">
      <title>Documentation</title>

      <section id="whydocbook">
        <title>Why Docbook?</title>

        <para>Documentation for geotools is written using <ulink
        url="http://www.oasis-open.org/committees/docbook/xml/simple/">Simplified
        Docbook</ulink> format. Simplified Docbook is a subset of Docbook XML,
        a versatile format used by the <ulink url="http://www.linuxdoc.org">Linux
        Documentation Project</ulink> (among others).</para>

        <para>Docbook can be easily converted into numerous output formats,
        like HTML, PDF, etc.</para>

        <para>Using Docbook ensures documentation content is kept separate
        from presentation so content can written once and published in
        numerous formats and styles.</para>

        <para>There are a few GUI editors for docbook now, with more editors
        promising to support docbook in the future.</para>

        <para>According to <ulink
        url="http://www.tldp.org/HOWTO/Software-Release-Practice-HOWTO/documentation.html#AEN449">The
        Software Release&#39;s Howto</ulink>, docbook is the open source
        format of the future, and most of the high profile open source
        projects have moved or are moving to docbook as their coding
        standards. So we are saving ourselves pain in the future by embracing
        Docbook now.</para>

        <para>In the geotools build process, documentation is converted from
        Docbook format to HTML using maven.</para>

        <para>For information about using javadoc to comment your code, refer
        to <xref linkend="CodingStandards" />.</para>
      </section>

      <section>
        <title>Modular documentation</title>

        <para>Modular DocBook means content is broken up into smaller file
        modules that are recombined for publication. The advantages of modular
        documentation include:</para>

        <itemizedlist>
          <listitem>
            <para>Reusable content units.</para>
          </listitem>

          <listitem>
            <para>Smaller file units to load into an editing program.</para>
          </listitem>

          <listitem>
            <para>Distributed authoring.</para>
          </listitem>

          <listitem>
            <para>Finer grain version control.</para>
          </listitem>
        </itemizedlist>

        <para>Geotools <emphasis>design</emphasis> documentation uses a main
        document called <filename>design.xml</filename> which uses
        <literal>&#60;xi:include&#62;</literal> tags to include sections from
        other files.</para>

        <example>
          <title>Including sections into a master document</title>

          <variablelist>
            <varlistentry>
              <term><filename>design.xml</filename></term>

              <listitem>
                <programlisting>&#60;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&#62;
&#60;!DOCTYPE article PUBLIC &#34;-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN&#34;
&#34;http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd&#34;&#62;
&#60;article
id=&#34;index&#34;&#62;
  &#60;articleinfo&#62;
    &#60;title&#62;Geotools2 Software Design Description&#60;/title&#62;
  &#60;/articleinfo&#62;

  &#60;section&#62;
    &#60;title id=&#34;scope&#34;&#62;Scope&#60;/title&#62;

    &#60;xi:include xmlns:xi=&#34;http://www.w3.org/2001/XInclude&#34;
    href=&#34;license.sgml&#34;/&#62;
  &#60;/section&#62;
&#60;/article&#62;</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><filename>license.sgml</filename></term>

              <listitem>
                <programlisting>&#60;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&#62;
&#60;!DOCTYPE section PUBLIC &#34;-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN&#34;
&#34;http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd&#34;&#62;
&#60;section&#62;
  &#60;title id=&#34;licence&#34;&#62;License.&#60;/title&#62;

  &#60;para&#62;Copyright (c) 2002 Cameron Shorter. Permission is granted to copy,
  distribute and/or modify this document under the terms of the &#60;ulink
  url=&#34;http://www.fsf.org/copyleft/fdl.html&#34;&#62;GNU Free Documentation License&#60;/ulink&#62;,
  Version 1.1 or any later version published by the Free Software Foundation;
  with the Invariant Sections being with no Invariant Sections, with the
  Front-Cover Texts being no Front-Cover Texts, and with the Back-Cover Texts
  being no Back-Cover Texts.&#60;/para&#62;
&#60;/section&#62;</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>
        </example>

        <para>If you want to document a new module, you need to write a new
        <filename>xxxmodule.sgml</filename> section file, and then add an
        <literal>&#60;xi:include&#62;</literal> tag into <filename>design.xml</filename>.</para>
      </section>

      <section>
        <title>Location of docbook files and images</title>

        <para>Docbook files should be stored in:</para>

        <itemizedlist>
          <listitem>
            <para><filename>geotools/geotools-src/docs/sdocbook/&#60;name&#62;.sgml</filename>
            if the section is generic and not associated with a particular
            module.</para>
          </listitem>

          <listitem>
            <para><filename>geotools/geotools-src/&#60;module&#62;/sdocbook/&#60;name&#62;.sgml</filename>
            if the section describes a module.</para>
          </listitem>
        </itemizedlist>

        <para>If your section uses images, then they should be stored in:</para>

        <itemizedlist>
          <listitem>
            <para><filename>geotools/geotools-src/docs/sdocbook/images/design/&#60;name&#62;.png</filename>
            if the section is generic and not associated with a particular
            module.</para>
          </listitem>

          <listitem>
            <para><filename>geotools/geotools-src/&#60;module&#62;/sdocbook/images/&#60;module&#62;/&#60;name&#62;.sgml</filename>
            if the section describes a module.</para>
          </listitem>
        </itemizedlist>

        <para>Note images should not be stored in <filename>&#60;module&#62;/sdocbook/images/*.png</filename>.
        This is because images from all modules will be copied into one target
        directory and images with the same name will overwrite each other.</para>

        <para>If you create a new images directory, then you also need to
        update the <filename>geotools-src/docs/gtpublish</filename> script to
        include the location of your images directory. Otherwise your images
        will not be copied when <filename>gtpublish</filename> is run.</para>

        <variablelist>
          <varlistentry>
            <term><filename>lines of gtpublish to update when adding a new
            images directory</filename></term>

            <listitem>
              <programlisting>imageSource=&#34;sdocbook/images \
    ../defaultcore/sdocbook/images \
    ../sldstyling/sdocbook/images&#34;
</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Publishing docbook files</title>

        <section>
          <title>Publishing introduction</title>

          <para>The problem with <literal>&#60;xi:include&#62;</literal> tags,
          the master document, <filename>design.xml</filename>, is not valid
          XML. Consequently, many XSLT engines do not work on the master
          document.</para>
        </section>

        <section>
          <title>Publishing master documents</title>

          <para><filename>gtpublish</filename> can be used to publish all
          docbook files, including those files which contain
          <literal>&#60;xi:include&#62;</literal> tags. The downside is that
          it is a unix shell script which depends on <filename>xsltproc</filename>.
          If you are using linux then make sure you have <filename>xsltproc</filename>
          installed then run the following:</para>

          <example>
            <title>Use of gtpulish</title>

            <literallayout><computeroutput>$ cd ~/geotools/geotools-src/docs
$ ./gtpubish
$ netscape ~/geotools/geotools-src/docs/www/design.html</computeroutput></literallayout>
          </example>

          <para>I have not tested <filename>gtpublish</filename> on windows,
          so if you work out how to do it, get back to me so we can update
          this document. I suggest you install <ulink
          url="http://www.cygwin.com/">cygwin</ulink> and gtpublish then try
          and run gtpublish. See this link on <ulink
          url="http://www.sagehill.net/xml/docbookxsl/ToolsSetup.html#InstallXsltproc">installing
          xsltproc</ulink>.</para>

          <para>Note: If your images are not being copied into the target
          directory, then you probably have forgotten to add the images&#39;
          directory into the <filename>gtpublish</filename> script.</para>
        </section>

        <section>
          <title>Publishing using ant</title>

          <para><filename>ant</filename> works all platforms and is probably
          already installed on all developers computers. ant will process all
          docbook files but will not expand <literal>&#60;xi:include&#62;</literal>
          tags.</para>

          <example>
            <title>Use of ant for publishing license.smgl</title>

            <literallayout><computeroutput>$ cd ~/geotools/geotools-src/docs
$ ant
$ netscape ~/geotools/geotools-src/docs/www/license.html</computeroutput></literallayout>
          </example>

          <para>In version 1.5, ant has a bug which prevents it from
          publishing more than one docbook document at a time. The workaround
          is to run <filename>ant</filename> a number of times. Earlier
          versions of <filename>ant</filename> have even more bugs and less
          functionality.</para>
        </section>

        <section>
          <title>Publishing using maven</title>

          <para>Maven allows uses to process docbook to (arnika/velocity?) and
          then to html. However at the time of writing, this functionality was
          still very bug ridden. Hopefully it will improve soon.</para>
        </section>
      </section>

      <section id="docbookeditors">
        <title>Docbook Editors</title>

        <para>You can edit docbook with the following free tools:</para>

        <itemizedlist>
          <listitem>
            <para><ulink url="http://www.xmlmind.com/xmleditor/">XXE</ulink>
            is a java based, <emphasis>What You See Is What You Mean (WYSIWYM)</emphasis>
            editor. It provides a slightly clunky but workable GUI interface
            for editing Docbook documents. It is well worth trying.</para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.netbeans.org/">Netbeans</ulink>:
            Simple Docbook is XML, so XML editors work well. Netbeans has a
            nice XML plugin which I use.</para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.vim.org/">vim</ulink> and <ulink
            url="http://www.gnu.org/software/emacs/emacs.html">emacs</ulink>,
            or any text editor can be used.</para>
          </listitem>

          <listitem>
            <para>There are a number of WYSIWYM editors developing Docbook
            export/import functionality at the time of writing. Of note,
            <ulink url="http://www.openoffice.org">Open Office</ulink> and
            <ulink url="www.lyx.org">Lyx</ulink> look promising.</para>
          </listitem>

          <listitem>
            <para>Viewing Docbook: Tomas has written a useful web page for
            viewing Docbook pages at <ulink url="???">http://www.cartesia.org/modules.php?op=modload&#38;name=NS-Docbook&#38;file=index</ulink>.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title id="docbookreferences">Docbook References</title>

        <para>There are a few references worth knowing:</para>

        <itemizedlist>
          <listitem>
            <para><ulink url="http://www.tldp.org/LDP/LDP-Author-Guide/">The
            Linux Documentation Project Author Guide</ulink> provides an
            introduction to Docbook and some of the key tags. Don&#39;t worry
            about the sections on tools for converting docbook as geotools
            uses the maven build process instead. Note that the geotools uses
            Simplified Docbook which is XML based. There are various versions
            of Docbook which makes things confusing.</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.oasis-open.org/committees/docbook/xml/simple/sdocbook/elements.html">The
            Simplified Docbook Summary</ulink> provides a list of all the XML
            tags you can use, and the dependency between these tags.</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.oasis-open.org/docbook/documentation/reference/html/docbook.html">Docbook,
            the Definitive Guide</ulink> provides comprehensive documentation
            about Docbook. At the time of writing, this reference referred to
            version 3 of Docbook, while the Simplified Docbook used by
            geotools is version 4.1.2.4.</para>
          </listitem>

          <listitem>
            <para><ulink url="Using the Docbook XSL Stylesheets">Using the
            Docbook XSL Stylesheets</ulink>, in particular, the section on
            <ulink
            url="http://www.sagehill.net/xml/docbookxsl/ModularDoc.html">writing
            modular docbook files</ulink>.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="cvs">
      <title>Code Versioning (using CVS with ssh)</title>

      <para>To edit geotools files you will need to set up CVS and ssh on your
      computer so that you can access the files stored on <ulink
      url="http://sourceforge.net">http://sourceforge.net</ulink>. How to
      setup ssh and cvs for use with Sourceforge is explained in the documents
      at: <ulink url="https://sourceforge.net/docman/?group_id=1">https://sourceforge.net/docman/?group_id=1</ulink>.</para>

      <para>To do:</para>

      <itemizedlist>
        <listitem>
          <para>Also point to some HOWTOs for windows users.</para>
        </listitem>

        <listitem>
          <para>What is acceptable to commit to CVS, what is not. (Ie, code
          should compile)</para>
        </listitem>

        <listitem>
          <para>Talk about version numbering convention, use of branches, etc
          (if we decide to do this).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="netbeans">
      <title>Netbeans</title>

      <section id="netbeansoverview">
        <title>Introduction</title>

        <para><ulink url="http://www.netbeans.org">Netbeans</ulink> is a free
        java IDE which also provides a framework for adding extra
        functionality. Geotools2 is developed using the same modular structure
        as Netbeans and we plan to integrate geotools into Netbeans. Sun have
        repackaged Netbeans and called it <ulink
        url="http://wwws.sun.com/software/sundev/jde/index.html">Sun ONE
        Studio</ulink> (previously Forte for J).</para>
      </section>

      <section id="netbeansprerequisites">
        <title>Prerequisites</title>

        <para>Before setting up Netbeans for geotools development you need to:</para>

        <itemizedlist>
          <listitem>
            <para>Have ssh installed, and ssh key-value pairs set up so you do
            not need a password to access sourceforge CVS repository. See
            <link linkend="cvs">Code Versioning</link> for details.</para>
          </listitem>

          <listitem>
            <para>Have CVS installed.</para>
          </listitem>

          <listitem>
            <para>Have checked out the geotools2 CVS repository into a local
            directory on your computer.</para>
          </listitem>

          <listitem>
            <para>The geotools .jar files need to be created in the release
            directory, which is done by running the ant or maven build
            scripts.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="netbeanscompileoptions">
        <title>Compile Options</title>

        <para>As <link linkend="java">mentioned</link>, geotools needs to be
        compiled with a recent Java compiler. This is done from the following
        windows:</para>

        <para><command>Tools-&#62;Options-&#62;Building-&#62;Compiler Types</command><command>-&#62;External
        Compilation</command></para>

        <para>Set <command><command>Enable JDK 1.4 Source</command></command>
        to &#34;True&#34;.</para>
      </section>

      <section id="netbeansmodules">
        <title>Adding Modules</title>

        <para>A few modules should be added to the standard Netbeans install
        to help geotools development. For use installed from the Netbeans
        Update center use:</para>

        <itemizedlist>
          <listitem>
            <para>Tools-&#62;Update Center</para>
          </listitem>
        </itemizedlist>

        <para>For other modules use:</para>

        <itemizedlist>
          <listitem>
            <para>Tools-&#62;Options-&#62;System-&#62;Modules (for Netbeans
            3.3)</para>
          </listitem>

          <listitem>
            <para>Tools-&#62;Options-&#62;IDE
            Configuration-&#62;System-&#62;Modules (for Netbeans 3.4)</para>
          </listitem>

          <listitem>
            <para>right click on <command><command>Modules</command></command></para>
          </listitem>

          <listitem>
            <para>select <command>add-&#62;Module</command></para>
          </listitem>

          <listitem>
            <para>select the relevant .jar file.</para>
          </listitem>
        </itemizedlist>

        <para>The following modules may be installed:</para>

        <itemizedlist>
          <listitem>
            <para><filename>View over a Filesystem</filename> is a &#34;must
            have&#34; module of Netbeans. It allows you to mount each module
            within CVS and is almost essential for geotools development within
            Netbeans. The default Netbeans only allows you to mount one source
            directory but geotools has a source directory for each geotools
            module.</para>
          </listitem>

          <listitem>
            <para><filename>XML Editor</filename> is useful for editing and
            validating documentation and Geographic Markup Language (GML)
            files.</para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.gentleware.com/products/index.php3">Poseidon</ulink>
            is a Unified Modeling Language (UML) editor which we occasionally
            use to explain ideas about design. You can get away without
            installing this.</para>
          </listitem>

          <listitem>
            <para><filename>RefactorIt</filename> is a useful module for
            changing many classes at once, and provide a free licence for open
            source projects like geotools. See <xref linkend="refactorit" />
            for more details. Installation instructions are in the download.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="netbeansmounting">
        <title>Mounting Directories</title>

        <variablelist>
          <varlistentry>
            <term>Geotools Repository</term>

            <listitem>
              <para>You will need to mount the geotools2 repository. In the
              Explorer window, right click on Filesystems, select
              <command>Mount-&#62;Version Control-&#62;CVS</command>. Select
              the geotools2 directory that you have already booked out from
              CVS. Don&#39;t worry about the relative mount point, it will be
              covered by &#34;View over Filesystem&#34; below. You
              shouldn&#39;t need to change the CVS and ssh parameters, they
              will have been picked up correctly from when you booked geotools
              out from CVS manually.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>View over FileSystem</term>

            <listitem>
              <para>If you want to debug files using Netbeans, you will need
              to mount the source module directories based on the root source
              directory of that module. To do this, you will need to ensure
              the &#34;View over FileSystem&#34; Netbeans module is installed.
              Select all <filename>geotools2/geotools-src/&#60;module_name&#62;/src</filename>
              directories in the Filesystem Explorer then select
              <command>Tools-&#62;Mount As New Filesystem</command>. If you
              are running any test or demonstration programs, you will
              probably also need to mount their directory using the same
              method.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>External Jar files</term>

            <listitem>
              <para>External packages need to be mounted. In the Explorer
              window, right click <command>FileSystems</command> and select
              <command>Mount-&#62;Archive Files</command>
              <filename>geotools2/extbin/&#60;module&#62;/lib/*.jar</filename>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>It is a good idea to update the Parser Database after mounting
        the geotools directories. This enables filename auto-completion and
        &#34;go to declaration&#34;.</para>
      </section>

      <section>
        <title>Using Projects</title>

        <para>After mounting all the directories from the previous section,
        your netbeans window explorer may be a bit crowded. You can create a
        manageable view of your classes by creating a project.</para>

        <para>Right click on your files or modules in the windows explorer,
        then select <command>Tools-&#62;Add to Project</command>.</para>

        <para>You can now view your files by selecting the <command>Project</command>
        tab in the explorer.</para>
      </section>
    </section>

    <section>
      <title id="refactorit">RefactorIt</title>

      <para><ulink url="http://www.refactorit.com/">RefactorIt</ulink>
      provides tools to:</para>

      <itemizedlist>
        <listitem>
          <para>research, probe and understand existing source code,</para>
        </listitem>

        <listitem>
          <para>move, organise and transform existing code,</para>
        </listitem>

        <listitem>
          <para>and provide code metrics.</para>
        </listitem>
      </itemizedlist>

      <para>More details can be found from the online help.</para>

      <para>RefactorIt is commercial, but provides free licences for Open
      Source projects like Geotools. See the RefactorIt web pages for details.
      It can be plugged into a variety of IDEs, including
      <filename>Netbeans</filename>.</para>

      <para>Installation is fairly strait forward through <command>Tools
      -&#62; RefactorIt -&#62; Project Options</command> in
      <filename>netbeans</filename>, although setting up soucepath and
      classpath is a bit of a pain in the arse if some of the geotools files
      don&#39;t compile.</para>
    </section>

    <section>
      <title id="poseidon">Poseidon</title>

      <para><ulink url="http://www.gentleware.com/products/index.php3">Poseidon</ulink>
      is a Unified Modeling Language (UML) editor. Using Poseidon you can
      reverse engineer the Geotools2 code and view class diagrams, javadocs
      and code using a powerful graphical interface. It is a good way to
      quickly navigate through the Geotools2 design.</para>

      <para>Poseidon can&#39;t revserse engineer too much of the code at once
      because it sometimes runs out of memory, and sometimes freezes (which is
      possibly due to running out of memory). Below is a few tips I used to
      import Geotools2 files into Poseidon.</para>

      <variablelist>
        <varlistentry>
          <term>Increase Poseidon Memory Size</term>

          <listitem>
            <para>As explained in the <ulink
            url="http://www.gentleware.de/support/faq.pl#e33">Poseidon FAQ</ulink>,
            you can increase Poseidon memory by changing the parameter
            &#34;-Xmx 96m&#34; to &#34;-Xm192 m&#34; in the Poseidon startup
            script. This changes memory allocation from 96Meg to 192Meg.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Import a few modules at a time</term>

          <listitem>
            <para>For some reason, the <filename>cts-transform</filename>
            module has problems being imported with other modules. I imported
            the other modules by copying <filename>geotools2/geotools-src</filename>
            to a temporary directory, removed the <filename>geotools2/geotools-src/cts-transform</filename>
            directory, then imported <filename>geotools2/geotools-src</filename>.
            Afterwards, I imported <filename>geotools2/geotools-src/cts-transform</filename>
            seperately.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Poseidon can be installed into <emphasis>Netbeans</emphasis> as a
      module. Refer to Poseidon download instructions for more details.</para>
    </section>
  </section>

  <!--xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="glossary.sgml"/-->

  <!--xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="umllegend.sgml"></xi:include-->
</article>