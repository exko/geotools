<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>DataStore Tutorial 4: Capabilities</title>

  <para>In this document we will explore the full capabilities of our
  completed PropertyDataStore.</para>

  <sect1>
    <title>DataStore Documents</title>

    <para>In this series of documents we will build a simple a simple java
    property file based DataStore, and in the process explore several aspects
    of DataStores and their implementation.</para>

    <para>DataStore Documents:</para>

    <orderedlist>
      <listitem>
        <para>DataStore Tutorial 1: mplementation</para>
      </listitem>

      <listitem>
        <para>DataStore Tutorial 2: Use</para>
      </listitem>

      <listitem>
        <para>DataStore Tutorial 3: Extension</para>
      </listitem>

      <listitem>
        <para>DataStore Tutorial 4: Capabilities</para>
      </listitem>

      <listitem>
        <para>DataStore Tutorial 5: Optimization</para>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1>
    <title>Complete DataStore API</title>

    <para>Now that we have completed our PropertyDataStore implementation we
    can explore the remaining capabilities of the DataStore API.</para>

    <para>The examples use the file <filename>road.properties</filename>:</para>

    <screen>_=id:Integer,name:String
fid1=1|jody
fid2=2|brent
fid3=3|dave
fid4=4|justin</screen>

    <para>PropertyDataStore API for data modificaiton:</para>

    <itemizedlist>
      <listitem>
        <para>createSchema( featureType )</para>
      </listitem>

      <listitem>
        <para>getFeatureWriter( typeName, filter, Transaction )</para>
      </listitem>

      <listitem>
        <para>getFeatureWriter( typeName, Transaction )</para>
      </listitem>

      <listitem>
        <para>getFeatureWriterAppend( typeName, Transaction )</para>
      </listitem>
    </itemizedlist>

    <para>If you would like to follow along with these examples they are
    available as a JUnit Test along with the source code for
    PropertyDataStore.</para>

    <sect2>
      <title>DataStore.getFeatureSource( typeName )</title>

      <para>This method is the gateway to our high-level as provided by an
      instance of FeatureSource, FeatureStore or FeatureLocking. </para>

      <para>Now that we have implemented writing opperations the result of
      this method supports:</para>

      <itemizedlist>
        <listitem>
          <para>FeatureSource: the query opperations outlined in DataStore
          Tutorial 2: Use</para>
        </listitem>

        <listitem>
          <para>FeatureStore: modification and transaction support</para>
        </listitem>

        <listitem>
          <para>FeatureLocking: Interaction with a Feature based Locking</para>
        </listitem>
      </itemizedlist>

      <sect3>
        <title>FeatureStore</title>

        <para>FeatureStore provides Transaction support and modification
        opperations. FeatureStore is an extension of FeatureSource, you may
        check the result of getFeatureSource( typeName ) with the instanceof
        opperator.</para>

        <para>Example:</para>

        <programlisting>FeatureSource source = datastore.getFeatureSource( &#34;road&#34; );
if(!source instanceof FeatureStore){
    throw Exception(&#34;Modification not supported&#34;);
}
FeatureStore road = (FeatureStore) source;</programlisting>

        <para>FeatureStore defines:</para>

        <itemizedlist>
          <listitem>
            <para>addFeatures( featureReader)</para>
          </listitem>

          <listitem>
            <para>removeFeatures( filter )</para>
          </listitem>

          <listitem>
            <para>modifyFeatures( type, value, filter )</para>
          </listitem>

          <listitem>
            <para>modifyFeatures( types, values, filter )</para>
          </listitem>

          <listitem>
            <para>setFeatures( featureReader )</para>
          </listitem>

          <listitem>
            <para>setTransaction( transaction )</para>
          </listitem>
        </itemizedlist>

        <para>Once again many DataStores are able to provide optimized
        implementations of these opperations.</para>

        <para>Transaction Example:</para>

        <programlisting>Transaction t1 = new DefaultTransaction();
Transaction t2 = new DefaultTransaction();
    
FeatureType type = store.getSchema( &#34;road&#34; );
FeatureStore road = (FeatureStore) store.getFeatureSource(&#34;road&#34;);
FeatureStore road1 = (FeatureStore) store.getFeatureSource(&#34;road&#34;);
FeatureStore road2 = (FeatureStore) store.getFeatureSource(&#34;road&#34;);
    
road1.setTransaction( t1 );
road2.setTransaction( t2 );

Filter filter1 = FilterFactory.createFilterFactory().createFidFilter(&#34;fid1&#34;);
Filter filter2 = FilterFactory.createFilterFactory().createFidFilter(&#34;fid2&#34;);        
        
Feature feature =
    type.create( new Object[]{ new Integer(5), &#34;chris&#34;}, &#34;fid5&#34; );
            
assertEquals( 4, road.getFeatures().getCount() );
assertEquals( 4, road1.getFeatures().getCount() );
assertEquals( 4, road2.getFeatures().getCount() );
                
road1.removeFeatures( filter1 ); // road1 removes fid1 on t1
assertEquals( 4, road.getFeatures().getCount() );
assertEquals( 3, road1.getFeatures().getCount() );
assertEquals( 4, road2.getFeatures().getCount() );               
        
FeatureReader reader = DataUtilities.reader( new Feature[]{ feature, });
road2.addFeatures( reader ); // road2 adds fid5 on t2
    
assertEquals( 4, road.getFeatures().getCount() );
assertEquals( 3, road1.getFeatures().getCount() );
assertEquals( 5, road2.getFeatures().getCount() );        
            
t1.commit();
assertEquals( 3, road.getFeatures().getCount() );
assertEquals( 3, road1.getFeatures().getCount() );
assertEquals( 4, road2.getFeatures().getCount() );                
            
t2.commit();
assertEquals( 4, road.getFeatures().getCount() );
assertEquals( 4, road1.getFeatures().getCount() );
assertEquals( 4, road2.getFeatures().getCount() );</programlisting>
      </sect3>

      <sect3>
        <title>FeatureLocking</title>

        <para>FeatureLocking is the last extension to our high-level api. It
        provides support for preventing modifications to features for the
        duration of a Transaction, or a period of time.</para>

        <para>FeatureLocking defines:</para>

        <itemizedlist>
          <listitem>
            <para>setFeatureLock( featureLock )</para>
          </listitem>

          <listitem>
            <para>lockFeatures( query ) - lock features specified by query</para>
          </listitem>

          <listitem>
            <para>lockFeatures( filter ) - lock according to constraints</para>
          </listitem>

          <listitem>
            <para>lockFeatures() - lock all</para>
          </listitem>

          <listitem>
            <para>unLockFeatures( query )</para>
          </listitem>

          <listitem>
            <para>unLockFeatures( filter )</para>
          </listitem>

          <listitem>
            <para>unLockFeatures()</para>
          </listitem>

          <listitem>
            <para>releaseLock( string )</para>
          </listitem>

          <listitem>
            <para>refreshLock( string )</para>
          </listitem>
        </itemizedlist>

        <para>The concept of a FeatureLock matches the description provided in
        the OGC Web Feature Server Specification. Locked Features can only be
        used via Transactions that have been provided with the correct
        authroization.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>DataStore.getFeatureWriter( typeName, filter, transaction )</title>

      <para>Creates a FeatureWriter used to modify features indicated by a
      constraint.</para>

      <para>Example - removing all features:</para>

      <programlisting>FeatureWriter writer =
    store.getFeatureWriter( &#34;road&#34;, Filter.NONE, Transaction.AUTO_COMMIT  );

Feature feature;

try {
    while (writer.hasNext()) {
        feature = writer.next();
        writer.remove();
    }
} finally {
    writer.close();
}</programlisting>

      <para>This FeatureWriter does not allow the addition of new content, it
      can be used for modification and removal only.</para>

      <para>DataStores can often provide an optimized implementation.</para>
    </sect2>

    <sect2>
      <title>DataStore.getFeatureWriter( typeName, transaction )</title>

      <para>Creates a general purpose FeatureWriter. New content may be added
      after iterating through the provided content.</para>

      <para>Example - completely all features:</para>

      <programlisting>FeatureType type = store.getSchema(&#34;replace&#34;);
FeatureReader reader;
FeatureWriter writer;
Feature feature, newFeature;

reader = store.getFeatureReader(type, Filter.NONE, Transaction.AUTO_COMMIT );
writer = store.getFeatureWriter(&#34;road&#34;, Transaction.AUTO_COMMIT );
try {
    while (writer.hasNext()) {
        feature = writer.next();
        writer.remove();
    }
    while (reader.hasNext()) {
        feature = reader.next();
        newFeature = writer.next();
        newFeature.setAttributes(feature.getAttributes(null));
        writer.write();
    }
} finally {
    reader.close();
    writer.close();
}</programlisting>
    </sect2>

    <sect2>
      <title>DataStore.getFeatureWriterAppend( typeName, transaction )</title>

      <para>Creates a FeatureWriter for additing content.</para>

      <para>Example - making a copy</para>

      <programlisting>FeatureReader reader;
FeatureWriter writer;
Feature feature, newFeature;

FeatureType type = getSchema( &#34;road&#34; );
FeatureType type2 = DataUtilities( &#34;copy&#34;, &#34;id:Integer,geom:Geometry,name:String&#34; );

reader = store.getFeatureReader(type, Filter.NONE, Transaction.AUTO_COMMIT );
store.createSchema( copy );
writer = store.getFeatureWriterAppend( &#34;copy&#34;, Transaction.AUTO_COMMIT );
try {
    while (reader.hasNext()) {
        feature = reader.next();
        newFeature = writer.next();
        newFeature.setAttributes(feature.getAttributes(null));
        writer.write();
    }
}
finally {
    reader.close();
    writer.close();
}</programlisting>

      <para>DataStores can often provide an optimized implementation of this
      method.</para>
    </sect2>
  </sect1>
</article>