<?xml version="1.0" encoding="UTF-8"?>
<!-- ========================================================================
     GeoTools Common BUILD FILE
     This build file is licensed under the LGPL 
     It is used as a common way for GeoTools modules to build themselves and
     their appropriate dependencies, with no effort from the module
     maintainers.

     Formatting conventions for this file:
       - two space indents
       - 80 character line limits, when possible

     Modified: 5/9/2002
     Authors:  James MacGill, CCG
               Ian Turton, CCG
               Rob Hranac, VFNY
    ======================================================================== -->
<project default="all" name="geotools">

  <!-- ===================================================================== -->
  <!-- SET PROPERTIES                                                        -->
  <!-- ===================================================================== -->
  <!-- Set base directories -->
  <property name="dir.root" value="../.."/>
  <property name="dir.base" value=".."/>

  <!-- Set common directories -->
  <property name="dir.source" value="${dir.module}/src"/>
  <property name="dir.test" value="${dir.module}/tests/unit"/>
  <property name="dir.external.build" value="${dir.root}/extbin/gtbuild/lib"/>

  <!-- Set all external ant library paths -->
  <path id="path.netbeans" path="${dir.external.build}/nbantext.jar"/>
  <path id="path.checkstyle" path="${dir.external.build}/checkstyle-all-2.1.jar"/>

  <!-- Set all external geotools library paths -->
  <path id="path.external.core">
    <pathelement path="${dir.root}/extbin/core/lib/JTS.jar"/>
    <pathelement path="${dir.root}/extbin/core/lib/log4j.jar"/>
  </path>


  <!-- ===================================================================== -->
  <!-- SET OPTIONAL TASK DEFINITIONS                                         -->
  <!-- ===================================================================== -->
  <target name="taskdefs">
    <taskdef classname="org.netbeans.nbbuild.ForEach" classpathref="path.netbeans" name="forEach"/>        

    <taskdef classname="org.netbeans.nbbuild.CheckValue" classpathref="path.netbeans" name="check"/>        

    <taskdef classname="com.puppycrawl.tools.checkstyle.CheckStyleTask" classpathref="path.checkstyle" name="checkstyle"/>
  </target>


  <!-- ===================================================================== -->
  <!-- INITIALIZE                                                            -->
  <!-- ===================================================================== -->
  <target depends="taskdefs, modificationset" name="init">
    <mkdir dir="${releaseFolder}"/>
    <echo message="initializing with testing set to ${testing}"/>
    <condition property="has.dependancies">
      <not>
        <equals arg1="${dependancy}" arg2="$${dependancy}"/>
      </not>
    </condition>
    
    <condition property="has.extbin">           
      <not>
        <equals arg1="${extbin}" arg2="$${extbin}"/>
      </not>            
    </condition>
    <condition property="cond.styleCheck">
      <equals arg1="${checking}" arg2="true"/>
    </condition>
    <condition property="cond.styleCheckToScreen">
      <equals arg1="${checking}" arg2="screen"/>
    </condition> 
    <condition property="test.check">
        <and>
            <not>
                <equals arg1="${testsuite}" arg2="$${testsuite}"/>
            </not>
            <not>
                <equals arg1="${testing}" arg2="false"/>
            </not>
        </and>
    </condition>
    <condition property="cond.test">
        <equals arg1="${test.check}" arg2="true"/>
    </condition>
    <condition property="has.testDependancies">
      <and>
        <not>
          <equals arg1="${testDependancy}" arg2="$${testDependancy}"/>
        </not>
          <equals arg1="${cond.test}" arg2="true"/>
        </and> 
    </condition>
  </target>


  <!-- ===================================================================== -->
  <!-- PREPARE DEPENDENCIES                                                  -->
  <!-- ===================================================================== -->
  <!-- essentially a dummy target to set the classpath then build the depencies  -->
  <target depends="init,set-classpath,add-extbin" name="prepare-compile">
    <echo message="Prep-compile: ${project.name}"/>
    <antcall target="dependancies"/>
  </target>
  
  <target depends="init,set-classpath,add-extbin" name="prepare-tests">
    <echo message="Prep-test-compile: ${project.name}"/>
    <antcall target="testDependancies"/>
  </target>

  <!-- build a class path including extbin for this module -->
  <target if="has.extbin" name="add-extbin">
    <path id="path.compile">
    <fileset dir="${extbin}"/>
      <!--path refid="path.external.core"/ -->
      <fileset dir="${releaseFolder}"/>
      
    </path>
  </target>

  <!-- Build a class path with out extbin (i.e. this module has no extbin) -->
  <target name="set-classpath" unless="has.extbin">
    <path id="path.compile">
      <path refid="path.external.core"/>
      <fileset dir="${releaseFolder}"/>
    </path>
  </target>

  <!-- Recursively prepare dependencies -->
  <target if="has.dependancies" name="dependancies">
    <echo message="${project.name} calling dependancies"/>
    <forEach inheritall="false" locations="${dependancy}" startdir="${dir.base}" target="release">
      <property name="releaseFolder" value="${releaseFolder}"/>
      <property name="lastBuildAttemptTime" value="${lastBuildAttemptTime}"/>
      <property name="checking" value="false"/>
      <property name="testing" value="false"/>
    </forEach>
    <echo message="done depenancies for ${project.name}"/>
  </target>
  
  <!-- Recursively prepare dependencies for tests-->
  <target if="has.testDependancies" name="testDependancies">
    <echo message="${project.name} calling dependancies for tests into ${releaseFolder}"/>
    <forEach inheritall="false" locations="${testDependancy}" startdir="${dir.base}" target="release">
      <property name="releaseFolder" value="${releaseFolder}"/>
      <property name="lastBuildAttemptTime" value="${lastBuildAttemptTime}"/>
      <property name="checking" value="false"/>
      <property name="testing" value="false"/>
    </forEach>
  </target>

  <!-- ===================================================================== -->
  <!-- CHECK STYLE TASKS                                                     -->
  <!-- ===================================================================== -->
  <!-- Dummy target to call either of the dependancies depending on value of -->
  <!-- checking used in init.                                                -->
  <!--   checking=true - checks to file                                      -->
  <!--   checking=screen - checks to file and screen                         -->
  <!-- TODO: 3                                                               --> 
  <!--   failOnViolation should be set to true eventualy                     -->
  <target depends="checkToFile,checkToScreen" name="checkstyle"/>

  <!-- Check this style to a file -->
  <target if="cond.styleCheck" name="checkToFile">
    <echo message="using ${licence.header} as header check file"/>
    <checkstyle failOnViolation="false" maxLineLen="100"> 
      <fileset dir="${dir.source}" includes="**/*.java"/>
      <!-- formatter type="plain"/ -->
      <formatter toFile="CHECKSTYLE-report.txt" type="plain"/>
    </checkstyle>
  </target>

  <!-- Check this style to the screen -->
  <target if="cond.styleCheckToScreen" name="checkToScreen">
    <echo message="using ${licence.header} as header check file"/>
    <checkstyle failOnViolation="false" maxLineLen="100"> 
      <fileset dir="${dir.source}" includes="**/*.java"/>
      <formatter type="plain"/>
      <formatter toFile="CHECKSTYLE-report.txt" type="plain"/>
    </checkstyle>
  </target>


  <!-- ===================================================================== -->
  <!-- COMPILE TASKS                                                         -->
  <!-- ===================================================================== -->
  <!-- Compiles all code for the module. -->
  <target depends="prepare-compile" description="compile the code for the package" name="compile">
    <echo message="${dir.source}"/>
    <javac classpathref="path.compile" debug="true" source="1.4" srcdir="${dir.source}"/>
  </target>

  <!-- Compiles all test code for the module. -->
  <target depends="compile,prepare-tests" if="cond.test" name="compile-test">
   <echo message="compiling test code, cond.test=${cond.test} whilst testing=${testing} and testDependancies = ${has.testDependancies}"/>
    <javac debug="true" srcdir="${dir.test}">
            <classpath>
                <path path="${dir.module}/src"/>
                <path refid="path.compile"/>
                <path path="${dir.module}/../../extbin/gtbuild/lib/junit.jar"/>
            </classpath>
    </javac>
  </target>

  <!-- Runs the unit tests on the module, if any exist. -->
  <target depends="compile-test,checkstyle" if="cond.test" name="test">
    <junit fork="true" haltonfailure="true" printsummary="true">
      <formatter type="plain"/>
      <sysproperty key="dataFolder" value="${dir.module}/tests/unit/testData"/>
      <classpath>
        <path path="${dir.module}/src"/>
        <path refid="path.compile"/>
        <path path="${dir.module}/tests/unit"/>
        <path path="${dir.module}/../../extbin/core/lib/JTS.jar"/>
        <path path="${dir.module}/../../extbin/core/lib/log4j.jar"/>
        
      </classpath>
      <test fork="false" name="${testsuite}" todir="${dir.module}"/>
    </junit>
  </target>

  <!-- Copies all external libraries to release folder -->
  <target if="has.extbin" name="copy-extlib">
    <echo message="${project.name}: copying from ${extbin} to ${releaseFolder}"/>
    <copy todir="${releaseFolder}">
      <fileset dir="${extbin}"/>
    </copy>
  </target>


  <!-- ===================================================================== -->
  <!-- MAJOR TASKS                                                           -->
  <!-- ===================================================================== -->
  <!-- The default target for this project; should compile everything. -->
  <target depends="release" name="all"/>

  <!-- Prepares a jar for this module. -->
  <target depends="init,compile,test" name="release">
    <echo message="release of ${project.name} targeted at ${releaseFolder}"/>
    <mkdir dir="${releaseFolder}"/>
    <jar basedir="${dir.source}" jarfile="${releaseFolder}/${project.name}.jar"/>
    <antcall target="copy-extlib"/>
  </target>
    
  <!-- Cleans the module. -->
  <target depends="init" name="clean"> 
    <echo message="${project.name} cleaning src + ${releaseFolder}"/>
    <delete quiet="true">
      <fileset dir="${dir.source}" includes="**/*.class"/>
      <fileset dir="${releaseFolder}/" includes="*.jar"/>            
    </delete>
    <antcall target="clean-tests"/>
  </target>
        
  <!-- Cleans the tests for this module. -->
  <target if="testsuite" name="clean-tests">
    <echo message="${project.name} cleaning tests"/>  
    <delete quiet="true">  
        <fileset dir="${dir.module}/tests/unit/org/" includes="**/*.class"/>
    </delete>
  </target>
    

  <!-- ===================================================================== -->
  <!-- AUTOMATED TASKS                                                       -->
  <!-- ===================================================================== -->
  <!-- Ummm...I have no idea what this does. -->
  <target if="${lastBuildAttemptTime}" name="modificationset">
    <path id="cruisecontrol.ext">
      <fileset dir="../../extbin/gtbuild/lib/"/>
      <pathelement location="../../extbin/gtbuild/lib/cruisecontrol.jar"/>
    </path>
    <taskdef classname="net.sourceforge.cruisecontrol.ModificationSet" name="modificationset">
      <classpath refid="cruisecontrol.ext"/>        
    </taskdef>
    <modificationset dateformat="yyyy-MMM-dd HH:mm:ss" lastbuild="${lastBuildAttemptTime}" quietperiod="30">
      <cvselement cvsroot=":pserver:anoncvs@cvs.geotools.org:/cvsroot/geotools"/>
    </modificationset>
  </target>
    
</project>
