/*
 *    Geotools2 - OpenSource mapping toolkit
 *    http://geotools.org
 *    (C) 2002, Geotools Project Managment Committee (PMC)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 */
/*
 * Created on 29-feb-2004
 */
package org.geotools.demos.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.net.URL;

import javax.swing.JFrame;
import javax.swing.WindowConstants;

import org.geotools.data.arcgrid.ArcGridDataSource;
import org.geotools.gui.swing.StyledMapPane;
import org.geotools.map.DefaultMapContext;
import org.geotools.map.MapContext;
import org.geotools.styling.ColorMap;
import org.geotools.styling.RasterSymbolizer;
import org.geotools.styling.StyleBuilder;


/**
 * Simple class that shows how to load and symbolize a DEM from an ascii export file generated by
 * GRASS
 *
 * @author aaime
 */
public class ArcGridReader {
    public static void main(String[] args) throws Exception {
        URL url = ArcGridReader.class.getClassLoader().getResource("org/geotools/sampleData/spearfish_dem.asc.gz");
        ArcGridDataSource dataSource = new ArcGridDataSource(url);
        dataSource.setGRASSFormatEnabled(true);
        dataSource.setUseGzipCompression(true);

        MapContext mc = new DefaultMapContext();
        StyleBuilder sb = new StyleBuilder();
        ColorMap colorMap = sb.createColorMap(new double[] { 1000, 1300, 1600, 1900 },
                new Color[] {
                    new Color(0, 100, 0), new Color(150, 150, 50), new Color(200, 200, 50),
                    Color.WHITE
                }, ColorMap.TYPE_RAMP);
        RasterSymbolizer rs = sb.createRasterSymbolizer(colorMap, 1.0);
        mc.addLayer(dataSource.getFeatures(), sb.createStyle(rs));

        StyledMapPane mapPane = new StyledMapPane();
        mapPane.setMapContext(mc);

        JFrame frame = new JFrame();
        frame.setContentPane(mapPane.createScrollPane());
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setSize(new Dimension(640, 480));
        frame.setTitle("Spearfish DEM");
        frame.show();
    }
}
