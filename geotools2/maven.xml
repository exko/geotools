<!-- ==================================================================== -->
<!-- R E A C T O R                                                        -->
<!-- ==================================================================== -->
<!-- This is a template for a reactor that will hopefully allow users     -->
<!-- to easily set up their own reactors. The best the reactor can do     -->
<!-- now is take a set of projects and process them according to their    -->
<!-- sorted dependencies.                                                 -->
<!--                                                                      -->
<!-- This particular reactor will take a set of projects and:             -->
<!--                                                                 	    -->
<!-- a) sort the order of processing based on dependencies                -->
<!-- b) clean                                                             -->
<!-- c) compile                                                           -->
<!-- d) run unit tests                                                    -->
<!-- e) build the project jar                                             -->
<!-- f) install the project jar in the local repository jar so the        -->
<!--    subsequent builds may use it.                                     -->
<!--                                                                      -->
<!-- In addition to the build, documentation for each of the projects     -->
<!-- will be produced and a front-end site will be produced using general -->
<!-- information about the parent project and information gleaned from    -->
<!-- each of the individual projects. The attempt is to try and           -->
<!-- alleviate the manual aggregation of specific project information     -->
<!-- that needs to be present on the front-end site. So you might want    -->
<!-- to glean the navigation or a short synopsis of each project          -->
<!-- automatically.                                                       -->
<!--                                                                      -->
<!-- The hope is to provide a model and a set of best practices for       -->
<!-- collaborative development. How to set up a multi-component project   -->
<!-- like the commons; how to perform meaningful CI on multi-component    -->
<!-- projects; how to produce meaningful documentation with minimal       -->
<!-- developer input; how to set up tests; how to manage dependencies;    -->
<!-- and who knows what else.                                             -->
<!--                                                                      -->
<!-- There are a few things coming in the near future that should make    -->
<!-- the reactor truly useful. We have made some Quartz Jelly tags so     -->
<!-- that we can schedule reactors using familiar cron-like semantics. We -->
<!-- also have Werkflow Jelly tags so that we can capture the various     -->
<!-- states of the reactor and perform arbitrary actions based any        -->
<!-- number and combination of conditions.                                -->
<!-- ==================================================================== -->

<!--
<project default="build"
-->
<project
         xmlns:reactor="reactor"
         xmlns:j="jelly:core"
         xmlns:u="jelly:util"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven"
         xmlns:m="maven"
         xmlns:deploy="deploy"
         xmlns:texen="texen"
xmlns:velocity="jelly:org.apache.commons.jelly.tags.velocity.VelocityTagLibrary"
         default="build" >

 
  <!-- ================================================================== -->
  <!-- B U I L D                                                          -->
  <!-- ================================================================== -->
  
  <goal name="build">
  
    <echo>
      looking for modules in: ${basedir}/geotools-src
      
    </echo>
    <maven:reactor
      basedir="${basedir}/geotools-src"
      includes="*/project.xml"
      goals="clean,jar:install"
      banner="Building"
      ignoreFailures="true"
    />
    
    <echo>
      modules built and installed:  ${reactorProjects}
    </echo>
  
  </goal>
  
  <goal name="snapshot">
  
    <echo>
      looking for modules in: ${basedir}/geotools-src
      
    </echo>
    <maven:reactor
      basedir="${basedir}/geotools-src"
      includes="*/project.xml"
      goals="clean,jar:deploy-snapshot"
      banner="Deploying"
      ignoreFailures="true"
    />
    
    <echo>
      modules built and deployed:  ${reactorProjects}
    </echo>
  
  </goal>
  
  
  
  <!-- ================================================================== -->
  <!-- W E B S I T E                                                      -->
  <!-- ================================================================== -->
  
  <goal name="site">

    <!--
      ||
      || Generate the documentation for each of the commons projects.
      ||
    -->
    
    <maven:reactor
      basedir="${basedir}/geotools-src"
      includes="*/project.xml"
      goals="site:generate"
      banner="Generating site for"
      ignoreFailures="true"
    />

    
    

  </goal>
  
  <goal name="deploy-site">

    <!--
      ||
      || Deploy the documentation for each of the commons projects.
      ||
    -->

    <maven:reactor
      basedir="${basedir}/geotools-src"
      includes="*/project.xml"
      goals="clean,jar:install,site:deploy"
      banner="Deploying site for"
      ignoreFailures="true"
    />
  </goal>

  <!-- ================================================================== -->
  <!-- F R O N T  E N D  W E B S I T E                                    -->
  <!-- ================================================================== -->
  
  <goal name="site-front-end">
  
<echo>before reactor
</echo>
    <maven:reactor
      basedir="${basedir}/geotools-src"
      includes="*/project.xml"
      ignoreFailures="false"
      postProcessing="true"
    />
<echo>after reactor
</echo>
    
    <!--
      ||
      || Generate the documentation for the front-end site. First we will
      || generate the navigation based on the projects that we just
      || processed, then we will generate the front-end site itself.
      ||
    -->
    
    <echo>
      reactor list = ${reactorProjects}
    </echo>
    
<!-- old style not in beta8
    <attainGoal name="init-texen-tag"/>
    
    <texen:generate
      controlTemplate="navigation.vm"
      outputDirectory="${basedir}/xdocs"
      templatePath="${basedir}"
      outputFile="navigation.xml"
      reactorProjects="${reactorProjects}"
    />
-->

<velocity:merge name="xdocs/navigation.xml" 
		basedir="${basedir}"
		template="navigation.vm"
/>

    <attainGoal name="xdoc"/>

  </goal>

  <!-- ================================================================== -->
  <!-- F R O N T  E N D  W E B S I T E                                    -->
  <!-- ================================================================== -->

  <goal
    name="deploy-site-front-end">

    <m:user-check user="${maven.username}"/>
    
    <attainGoal name="site-front-end"/>

    <!-- This needs to taken from the project properties -->
    <property name="maven.homepage" value="/seis/raid1/Apache/htdocs/software/geotools/"/>
    <property name="maven.docs.dest" value="target/docs/"/>

    <echo>
      siteAddress = ${pom.siteAddress}
      siteDirectory = ${maven.homepage}
      maven.docs.dest = ${maven.docs.dest}
    </echo>

    <tar tarfile="${maven.final.name}-site.tar" basedir="${maven.docs.dest}"/>
    <gzip zipfile="${maven.final.name}-site.tar.gz" src="${maven.final.name}-site.tar"/>
    <delete file="${maven.final.name}-site.tar"/>
    
    <!-- Make sure the destination directory exists before trying to copy -->
    <exec dir="." executable="${maven.ssh.executable}">
      <arg line="${pom.siteAddress} -l ${maven.username} 'mkdir -p ${maven.homepage}'"/>
    </exec>

    <exec dir="." executable="${maven.scp.executable}">
      <arg value="${maven.final.name}-site.tar.gz"/>
      <arg value="${maven.username}@${pom.siteAddress}:${maven.homepage}"/>
    </exec>

    <exec dir="." executable="${maven.ssh.executable}">
      <arg line="${pom.siteAddress} -l ${maven.username} 'cd ${maven.homepage};gunzip ${maven.final.name}-site.tar.gz;tar xUvf ${maven.final.name}-site.tar;chmod -R g+u *;rm ${maven.final.name}-site.tar'"/>
    </exec>

    <delete file="${maven.final.name}-site.tar.gz"/>
        
  </goal>

</project>

